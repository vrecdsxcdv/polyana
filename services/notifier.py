import os
from typing import Iterable, List, Tuple
from loguru import logger
from telegram import InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError, BadRequest, Forbidden
from services.formatting import format_order_summary

def _parse_operator_ids() -> List[int]:
    """
    –°–æ–±–∏—Ä–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∏–∑ OPERATOR_IDS (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏ OPERATOR_CHAT_ID (–æ–¥–∏–Ω–æ—á–Ω—ã–π).
    –ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø—É—Å—Ç—ã–µ/–º—É—Å–æ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ int.
    """
    raw = []
    ids_env = os.getenv("OPERATOR_IDS", "")
    if ids_env:
        raw += [x.strip() for x in ids_env.split(",")]
    single = os.getenv("OPERATOR_CHAT_ID", "")
    if single:
        raw.append(single.strip())

    result = []
    for x in raw:
        if not x:
            continue
        try:
            result.append(int(x))
        except ValueError:
            logger.warning(f"Skip invalid OPERATOR id: {x!r}")
    # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –ø–æ—Ä—è–¥–æ–∫ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    uniq = []
    for x in result:
        if x not in uniq:
            uniq.append(x)
    return uniq

async def send_order_to_operators(bot, order, user, operator_chat_id, code):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫—É—é –≥—Ä—É–ø–ø—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –∑–∞–∫–∞–∑–∞
    order_summary = format_order_summary(order.__dict__ if hasattr(order, '__dict__') else order)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
    if user.username:
        user_info += f" (@{user.username})"
    user_info += f" (ID: {user.id})"
    
    text = f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n\n{order_summary}\n\n{user_info}\n\nüî¢ –ö–æ–¥ –∑–∞–∫–∞–∑–∞: <code>{code}</code>"
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–∫–∞–∑–∞
    keyboard = [
        [
            InlineKeyboardButton("üì¶ –í–∑—è—Ç—å", callback_data=f"take_order_{code}"),
            InlineKeyboardButton("‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ", callback_data=f"start_work_{code}"),
            InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"complete_order_{code}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    results = await send_order_to_operators_universal(
        bot=bot,
        text=text,
        reply_markup=reply_markup,
        parse_mode='HTML'
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
    if hasattr(order, 'attachments') and order.attachments:
        for attachment in order.attachments:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤–æ –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ —á–∞—Ç—ã
                for chat_id, success, _ in results:
                    if success:
                        try:
                            await bot.send_document(
                                chat_id=chat_id,
                                document=attachment.get('file_id'),
                                caption="üìé –ú–∞–∫–µ—Ç PDF"
                            )
                        except Exception as e:
                            logger.error(f"Error sending attachment to chat_id={chat_id}: {e}")
            except Exception as e:
                logger.error(f"Error processing attachment: {e}")
    
    return results

async def send_order_to_operators(bot, text, reply_markup=None, parse_mode=None):
    """Resilient function to send order to operators chat"""
    # Import OPERATOR_CHAT_ID from app.py
    from app import OPERATOR_CHAT_ID
    
    if not OPERATOR_CHAT_ID:
        logger.warning("OPERATOR_CHAT_ID not set ‚Äî skipping send to operators")
        return None
    try:
        msg = await bot.send_message(
            chat_id=int(OPERATOR_CHAT_ID),
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=True,
        )
        return msg
    except (BadRequest, Forbidden) as e:
        logger.error(f"Failed to send to operators chat {OPERATOR_CHAT_ID}: {e}")
        return None

async def send_order_to_operators_universal(bot, text: str, reply_markup=None, parse_mode=None) -> List[Tuple[int, bool, str]]:
    """
    NEW: –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–º—É —á–∞—Ç—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (chat_id, success, error_message).
    –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Ä—É–∂—É.
    """
    results: List[Tuple[int, bool, str]] = []
    
    # NEW: –ò—Å–ø–æ–ª—å–∑—É–µ–º env_int helper –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è OPERATOR_CHAT_ID
    from app import env_int
    op_chat = env_int("OPERATOR_CHAT_ID")
    if op_chat is None:
        logger.warning("OPERATOR_CHAT_ID is not set; skip notifying operators")
        return []

    try:
        await bot.send_message(
            chat_id=op_chat,
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=True,
        )
        results.append((op_chat, True, ""))
    except (BadRequest, TelegramError) as e:
        logger.error(f"Failed to send order to operators (chat {op_chat}): {e}")
        results.append((op_chat, False, str(e)))
    except Exception as e:
        logger.exception(f"Unexpected error notifying operator chat_id={op_chat}: {e}")
        results.append((op_chat, False, str(e)))
    return results