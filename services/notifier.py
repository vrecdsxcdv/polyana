"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.
"""

import logging
from typing import Optional, List

from telegram import Bot
from telegram.error import TelegramError

from config import config
from services.formatting import FormattingService
from keyboards import get_operator_keyboard
from models import Attachment

logger = logging.getLogger(__name__)


class NotifierService:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤."""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞."""
        self.operator_chat_id = config.OPERATOR_CHAT_ID
    
    async def notify_new_order(self, bot: Bot, order, user) -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ."""
        if not self.operator_chat_id:
            return False
        
        try:
            message = FormattingService.format_order_card(order, user, for_operator=True)
            
            from keyboards import get_operator_keyboard
            keyboard = get_operator_keyboard(order.id)
            
            await bot.send_message(
                chat_id=self.operator_chat_id,
                text=message,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ {order.code} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ: {e}")
            return False
    
    async def notify_operator_call(self, bot: Bot, user_id: int, username: Optional[str], 
                                 first_name: Optional[str], last_name: Optional[str], 
                                 message: str = "") -> bool:
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –≤—ã–∑–æ–≤–µ."""
        if not self.operator_chat_id:
            return False
        
        try:
            user_display = f"@{username}" if username else f"ID: {user_id}"
            if first_name or last_name:
                name = f"{first_name or ''} {last_name or ''}".strip()
                user_display += f" ({name})"
            
            notification_text = f"""
üö® –ö–õ–ò–ï–ù–¢ –ü–†–û–°–ò–¢ –ü–û–ú–û–©–ò

üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_display}
üÜî ID: {user_id}
"""
            
            if message:
                notification_text += f"\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message}"
            
            notification_text += "\n\n@all - –Ω–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!"
            
            await bot.send_message(
                chat_id=self.operator_chat_id,
                text=notification_text,
                parse_mode='HTML'
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤—ã–∑–æ–≤–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–∑–æ–≤–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            return False
    
    async def notify_client(self, bot: Bot, user_id: int, message: str) -> bool:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É."""
        try:
            await bot.send_message(
                chat_id=user_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
            
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {e}")
            return False


# --- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å—Ç–∏–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä–Ω–æ–≥–æ API ---

async def send_order_to_operators(bot: Bot, order, user):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –∏ –≤–ª–æ–∂–µ–Ω–∏—è (reply –∫ –∫–∞—Ä—Ç–æ—á–∫–µ)."""
    import os
    OP = int(os.getenv("OPERATOR_CHAT_ID", "0") or "0")
    if not OP:
        return
    
    try:
        text = FormattingService.format_order_card(order, user, for_operator=True)
        card = await bot.send_message(OP, text=text, reply_markup=get_operator_keyboard(order.id))
        thread = card.message_id
        
        # –î—É–±–ª–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ –µ—Å—Ç—å
        for a in order.attachments or []:
            try:
                if a.tg_message_id and a.from_chat_id:
                    await bot.copy_message(
                        chat_id=OP, 
                        from_chat_id=a.from_chat_id, 
                        message_id=a.tg_message_id, 
                        reply_to_message_id=thread
                    )
                else:
                    await bot.send_document(
                        OP, 
                        document=a.file_id, 
                        filename=a.original_name or None, 
                        reply_to_message_id=thread
                    )
            except Exception:
                logger.exception("Forward attachment failed: order=%s attachment=%s", order.id, a.id)
    except Exception as e:
        logger.exception("send_order_to_operators fail: %s", e)


async def notify_operator_called(bot: Bot, order, user):
    operator_chat_id = config.OPERATOR_CHAT_ID
    if not operator_chat_id:
        return
    from texts import OPERATOR_NOTIF_PREFIX
    try:
        prefix = f"{OPERATOR_NOTIF_PREFIX}\n\n"
        text = prefix + FormattingService.format_order_card(order, user, for_operator=True)
        await bot.send_message(chat_id=int(operator_chat_id), text=text, reply_markup=get_operator_keyboard(order.id))
    except Exception as e:
        logger.exception("notify_operator_called fail: %s", e)