import random
import string
from datetime import datetime
from sqlalchemy.orm import Session
from sqlalchemy.exc import NoResultFound
from typing import List, Tuple
from sqlalchemy import func
from sqlalchemy import select
from database import get_db, Base
from sqlalchemy import Column, Integer, String, Text, DateTime, Boolean
from models import OrderDTO

class Order(Base):
    __tablename__ = "orders"
    
    id = Column(Integer, primary_key=True, autoincrement=True)
    code = Column(String(20), unique=True, nullable=False)
    user_id = Column(Integer, nullable=False)
    what_to_print = Column(String(100), nullable=False)
    quantity = Column(Integer, default=0)
    format = Column(String(50), default="")
    sides = Column(String(10), default="")
    paper = Column(String(50), default="")
    deadline_at = Column(DateTime, nullable=True)
    contact = Column(String(50), default="")
    notes = Column(Text, default="")
    lamination = Column(String(20), default="none")
    bigovka_count = Column(Integer, default=0)
    corner_rounding = Column(Boolean, default=False)
    sheet_format = Column(String(20), default="")
    custom_size_mm = Column(String(50), default="")
    material = Column(String(20), default="")
    print_color = Column(String(10), default="color")
    status = Column(String(20), default="NEW")
    needs_operator = Column(Boolean, default=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
STATUS_MAP = {
    "NEW": "–ù–æ–≤—ã–π",
    "TAKEN": "–í–∑—è—Ç–æ",
    "IN_PROGRESS": "–í —Ä–∞–±–æ—Ç–µ",
    "DONE": "–ì–æ—Ç–æ–≤–æ",
    "COMPLETED": "–ì–æ—Ç–æ–≤",  # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏
    "READY": "–ì–æ—Ç–æ–≤",       # —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∏–∑ README
}

def generate_order_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ XXXXXX-XXXX"""
    while True:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6 —Ü–∏—Ñ—Ä + 4 —Ü–∏—Ñ—Ä—ã
        part1 = ''.join(random.choices(string.digits, k=6))
        part2 = ''.join(random.choices(string.digits, k=4))
        code = f"{part1}-{part2}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
        db = get_db()
        try:
            existing = db.query(Order).filter(Order.code == code).first()
            if not existing:
                return code
        finally:
            db.close()

def create_order(user_data: dict, user_id: int) -> Order:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    db = get_db()
    try:
        order = Order(
            code=generate_order_code(),
            user_id=user_id,
            what_to_print=user_data.get('what_to_print', ''),
            quantity=user_data.get('quantity', 0),
            format=user_data.get('format', ''),
            sides=user_data.get('sides', ''),
            paper=user_data.get('paper', ''),
            deadline_at=user_data.get('deadline_at'),
            contact=user_data.get('contact', ''),
            notes=user_data.get('notes', ''),
            lamination=user_data.get('lamination', 'none'),
            bigovka_count=user_data.get('bigovka_count', 0),
            corner_rounding=user_data.get('corner_rounding', False),
            sheet_format=user_data.get('sheet_format', ''),
            custom_size_mm=user_data.get('custom_size_mm', ''),
            material=user_data.get('material', ''),
            print_color=user_data.get('print_color', 'color'),
            status='NEW',
            needs_operator=False
        )
        db.add(order)
        db.commit()
        db.refresh(order)
        return order
    finally:
        db.close()

def update_order_status(order_id: int, status: str, operator_username: str = None) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞"""
    db = get_db()
    try:
        order = db.query(Order).filter(Order.id == order_id).first()
        if order:
            order.status = status
            order.updated_at = datetime.utcnow()
            if operator_username:
                order.notes = f"{order.notes}\n\n–û–ø–µ—Ä–∞—Ç–æ—Ä: @{operator_username}".strip()
            db.commit()
            return True
        return False
    finally:
        db.close()

def get_order_by_code_session(session, code: str):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∑–∞–∫–∞–∑ –ø–æ –∫–æ–¥—É (—Å—Ç—Ä–æ–∫–∞ –≤–∏–¥–∞ YYMMDD-XXXX) –∏–ª–∏ None.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≥–æ—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –≤—ã–∑—ã–≤–∞—Ç—å –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
    """
    try:
        return session.query(Order).filter(Order.code == code).one()
    except NoResultFound:
        return None
    except Exception:
        return None

def get_order_by_code(code: str):
    """
    –û–±–µ—Ä—Ç–∫–∞: –ø–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ –∫–æ–¥—É, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç/–∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –≤–Ω—É—Ç—Ä–∏.
    –°–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å —Ö–µ–Ω–¥–ª–µ—Ä–∞–º–∏, –≥–¥–µ –Ω–µ—Ç —è–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.
    """
    db = get_db()
    try:
        return db.query(Order).filter(Order.code == code).first()
    finally:
        db.close()

def get_user_orders(user_id: int, limit: int = 10) -> list[Order]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    db = get_db()
    try:
        return db.query(Order).filter(Order.user_id == user_id).order_by(Order.created_at.desc()).limit(limit).all()
    finally:
        db.close()

# ---- Admin helpers ----
STATUS_DONE_KEYS = {"DONE", "COMPLETED", "READY", "–≥–æ—Ç–æ–≤", "–≥–æ—Ç–æ–≤–æ", "–≤—ã–ø–æ–ª–Ω–µ–Ω", "finished"}

def list_active_orders(offset: int = 0, limit: int = 10) -> Tuple[List[Order], int]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (orders, total_count) ‚Äî –≤—Å–µ –∑–∞–∫–∞–∑—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å –Ω–µ "–≥–æ—Ç–æ–≤/–≤—ã–ø–æ–ª–Ω–µ–Ω".
    """
    db = get_db()
    try:
        base_query = db.query(Order).filter(~Order.status.in_(STATUS_DONE_KEYS))
        total = db.query(func.count()).select_from(base_query.subquery()).scalar() or 0
        orders = base_query.order_by(Order.created_at.desc()).offset(offset).limit(limit).all()
        return orders, int(total)
    finally:
        db.close()

def ensure_order_code(order) -> str:
    """–ï—Å–ª–∏ —É –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç –∫–æ–¥–∞ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º."""
    if not getattr(order, "code", None):
        import uuid
        code = str(uuid.uuid4())[:8].upper()
        order.code = code
        db = get_db()
        try:
            merged = db.merge(order)
            db.commit()
        finally:
            db.close()
        return code
    return order.code

# –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
async def list_orders_admin(offset: int, limit: int, exclude_statuses=None):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ - –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Å–≤–æ—é ORM/–º–æ–¥–µ–ª—å."""
    exclude_statuses = exclude_statuses or []
    # –≤–µ—Ä–Ω–∏ list[dict]: id, code, category_title, quantity, status
    # ... SELECT ... WHERE status NOT IN (...)
    return []

async def get_order_admin(order_id: int):
    """–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ - –≤–µ—Ä–Ω–∏ dict –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏."""
    return None

def format_order_for_user(order) -> str:
    """
    –ö—Ä–∞—Ç–∫–∞—è —á–∏—Ç–∞–µ–º–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ù–µ –º–µ–Ω—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —á–∞—Ç!
    """
    status = STATUS_MAP.get(order.status or "NEW", order.status or "NEW")
    lines = [
        f"üßæ –ó–∞–∫–∞–∑ #{order.code}",
        f"–°—Ç–∞—Ç—É—Å: {status}",
    ]
    if getattr(order, "product_human", None):
        lines.append(f"–¢–∏–ø: {order.product_human}")
    if getattr(order, "what_to_print", None) and not getattr(order, "product_human", None):
        lines.append(f"–¢–∏–ø: {order.what_to_print}")
    if getattr(order, "quantity", None):
        lines.append(f"–¢–∏—Ä–∞–∂/–∫–æ–ª-–≤–æ: {order.quantity}")
    if getattr(order, "sheet_format", None):
        lines.append(f"–§–æ—Ä–º–∞—Ç: {order.sheet_format}")
    if getattr(order, "print_color", None):
        lines.append(f"–ü–µ—á–∞—Ç—å: {order.print_color}")
    # —Å—Ä–æ–∫, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω
    due = getattr(order, "deadline_at", None)
    if due:
        if isinstance(due, datetime):
            lines.append(f"–°—Ä–æ–∫: {due.strftime('%d.%m.%Y %H:%M')}")
        else:
            lines.append(f"–°—Ä–æ–∫: {due}")
    else:
        lines.append("–°—Ä–æ–∫: –º–µ–Ω–µ–¥–∂–µ—Ä —É—Ç–æ—á–Ω–∏—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–∫–µ—Ç–∞.")
    return "\n".join(lines)