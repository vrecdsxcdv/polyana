"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏).
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes, CallbackQueryHandler

from database import get_db
from models import Order, OrderStatus
from services.callbacks import parse_cb, OP_TAKE, OP_READY, OP_NEEDS_FIX, OP_CONTACT
from texts import ORDER_TAKEN_BY_OPERATOR, ORDER_MARKED_READY, ORDER_NEEDS_FIX

logger = logging.getLogger(__name__)


async def operator_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, order_id = parse_cb(query.data or "")
    if not action or not order_id:
        return

    db = get_db()
    try:
        order = db.query(Order).filter(Order.id == order_id).first()
        if not order:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # await query.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await context.bot.send_message(chat_id=query.message.chat_id, text="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –∫–ª–∏–µ–Ω—Ç tg id
        user_tg_id = order.user.tg_user_id if hasattr(order, 'user') else None

        if action == OP_TAKE:
            order.status = OrderStatus.IN_PROGRESS
            order.needs_operator = False
            db.commit()
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # await query.edit_message_text(f"üõ† –ó–∞–∫–∞–∑ #{order.code} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"üõ† –ó–∞–∫–∞–∑ #{order.code} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É.")
            if user_tg_id:
                try:
                    await context.bot.send_message(chat_id=user_tg_id, text=ORDER_TAKEN_BY_OPERATOR)
                except Exception:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –≤–∑—è—Ç–∏–∏ –≤ —Ä–∞–±–æ—Ç—É")

        elif action == OP_READY:
            order.status = OrderStatus.READY
            order.needs_operator = False
            db.commit()
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # await query.edit_message_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order.code} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π.")
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚úÖ –ó–∞–∫–∞–∑ #{order.code} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–π.")
            if user_tg_id:
                try:
                    await context.bot.send_message(chat_id=user_tg_id, text=ORDER_MARKED_READY)
                except Exception:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏")

        elif action == OP_NEEDS_FIX:
            order.status = OrderStatus.WAITING_CLIENT
            order.needs_operator = True
            db.commit()
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # await query.edit_message_text(f"‚úèÔ∏è –ü–æ –∑–∞–∫–∞–∑—É #{order.code} –∑–∞–ø—Ä–æ—à–µ–Ω—ã –ø—Ä–∞–≤–∫–∏.")
            await context.bot.send_message(chat_id=query.message.chat_id, text=f"‚úèÔ∏è –ü–æ –∑–∞–∫–∞–∑—É #{order.code} –∑–∞–ø—Ä–æ—à–µ–Ω—ã –ø—Ä–∞–≤–∫–∏.")
            if user_tg_id:
                try:
                    await context.bot.send_message(chat_id=user_tg_id, text=ORDER_NEEDS_FIX)
                except Exception:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∞–≤–∫–∞—Ö")

        elif action == OP_CONTACT:
            await query.answer("–û—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –µ–º—É –≤ –ª–∏—á–∫—É", show_alert=True)

    except Exception as e:
        logger.exception("operator_callback fail: %s", e)
        try:
            await query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)
        except Exception:
            pass
    finally:
        db.close()


def get_operator_handlers():
    return [CallbackQueryHandler(operator_callback, pattern=r"^op:")]