"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –∑–∞–∫–∞–∑–∞ (FSM).
"""

import logging
import re
import asyncio
from datetime import datetime
from typing import Dict, Any, Tuple, Optional

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from states import OrderStates
from keyboards import (
    get_home_keyboard, get_product_keyboard, get_bc_qty_keyboard, get_bc_size_keyboard,
    get_sides_keyboard, get_fly_format_keyboard, get_upload_keyboard,
    get_notes_keyboard, get_confirm_keyboard, get_keyboard_remove, BTN_BC, BTN_FLY, BTN_BNR, BTN_PLK,
    BTN_STK, BTN_OTHER, BTN_1, BTN_2, BTN_BC_SIZE, BTN_BACK, BTN_CANCEL,
    BTN_NEXT, BTN_SKIP, BTN_SUBMIT, get_sheet_format_keyboard, get_postpress_keyboard,
    get_cancel_choice_keyboard, get_format_selection_keyboard, get_material_keyboard,
    get_print_color_keyboard, get_banner_size_keyboard, get_print_format_keyboard,
    get_print_type_keyboard, get_postpress_options_keyboard, get_smart_cancel_keyboard
)
from texts import (
    ASK_PRODUCT, ASK_BC_QTY, ASK_BC_SIZE, ASK_BC_SIDES, INFO_BC_PAPER,
    ASK_FLY_FORMAT, ASK_FLY_SIDES, UPLOAD_PROMPT, UPLOAD_OK,
    ASK_DUE, ASK_PHONE, ASK_NOTES, ERR_INT, ERR_BC_MIN, ERR_BC_STEP,
    ERR_ONLY_PDF, ERR_DATE, ERR_PHONE, REMIND_USE_BTNS,
    ASK_SHEET_FORMAT, ASK_CUSTOM_SIZE, ASK_POSTPRESS, ASK_BIGOVKA_COUNT, ASK_CANCEL_CHOICE,
    ERR_SIZE_FORMAT, ERR_SIZE_RANGE, ERR_BIGOVKA_INT, LAYOUT_HINT,
    ASK_BANNER_SIZE, ASK_MATERIAL, ASK_PRINT_COLOR
)
from services.validators import (
    to_int, is_multiple_of_50, parse_fly_choice, normalize_phone, parse_due,
    parse_custom_size, parse_bigovka_count, parse_banner_size, parse_custom_size_mm, parse_banner_size_m
)
from services.formatting import FormattingService
from services.notifier import send_order_to_operators
from services.normalize import is_btn, norm_btn, just_text
from database import get_db
from models import Order, User, Attachment, OrderStatus
from config import config
from handlers.common import is_duplicate

logger = logging.getLogger(__name__)

# Regex-–ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
BACK_RE = re.compile(r"^(?:‚¨ÖÔ∏è?\s*–ù–∞–∑–∞–¥|–ù–∞–∑–∞–¥|/back|Back)$", re.IGNORECASE)
NEXT_RE = re.compile(r"^(?:‚û°Ô∏è?\s*–î–∞–ª–µ–µ|–î–∞–ª–µ–µ)$", re.IGNORECASE)
SKIP_RE = re.compile(r"^(?:‚è≠Ô∏è?\s*–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å|–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)$", re.IGNORECASE)
SUBMIT_RE = re.compile(r"^(?:–ì–æ—Ç–æ–≤–æ)$", re.IGNORECASE)

# –ö–ª—é—á–∏ –¥–ª—è —Å—Ç–µ–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
HKEY = "__state_stack__"
CURKEY = "__current_state__"


def _stack(ctx):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–µ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞."""
    return ctx.user_data.setdefault(HKEY, [])


def push_state(ctx, st):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ —Å—Ç–µ–∫."""
    stck = _stack(ctx)
    if not stck or stck[-1] != st:
        stck.append(st)


def pop_state(ctx):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ —Å—Ç–µ–∫–∞."""
    stck = _stack(ctx)
    if stck:
        stck.pop()
    return stck[-1] if stck else ConversationHandler.END


def set_cur(ctx, st):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    ctx.user_data[CURKEY] = st


def get_cur(ctx):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ."""
    return ctx.user_data.get(CURKEY)


# –ö–∞—Ä—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ fallback
PREV_OF = {
    OrderStates.BC_SIZE: OrderStates.BC_QTY,
    OrderStates.BC_SIDES: OrderStates.BC_SIZE,
    OrderStates.FLY_SIDES: OrderStates.FLY_FORMAT,
    OrderStates.ORDER_SHEET_FORMAT: OrderStates.PRODUCT,
    OrderStates.ORDER_CUSTOM_SIZE: OrderStates.ORDER_SHEET_FORMAT,
    OrderStates.ORDER_POSTPRESS: OrderStates.BC_SIDES,  # –¥–ª—è –≤–∏–∑–∏—Ç–æ–∫
    OrderStates.ORDER_POSTPRESS_BIGOVKA: OrderStates.ORDER_POSTPRESS,
    OrderStates.ORDER_UPLOAD: OrderStates.ORDER_POSTPRESS,
    OrderStates.ORDER_DUE: OrderStates.ORDER_UPLOAD,
    OrderStates.ORDER_PHONE: OrderStates.ORDER_DUE,
    OrderStates.ORDER_NOTES: OrderStates.ORDER_PHONE,
    OrderStates.ORDER_CONFIRM: OrderStates.ORDER_NOTES,
    OrderStates.PRINT_FORMAT: OrderStates.PRODUCT,
    OrderStates.PRINT_TYPE: OrderStates.PRINT_FORMAT,
}


async def handle_back(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'."""
    prev = pop_state(context)
    if prev == ConversationHandler.END:
        cur = get_cur(context)
        target = PREV_OF.get(cur)
        if not target:
            context.user_data.clear()
            return await render_state(update, context, OrderStates.PRODUCT)
        return await render_state(update, context, target)
    return await render_state(update, context, prev)


def wrong_button(update, kind: str):
    """–ú—è–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ –∫–Ω–æ–ø–∫–∏."""
    asyncio.create_task((update.message or update.effective_message).reply_text(REMIND_USE_BTNS))
    return True


async def render_state(update, context, state):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)."""
    set_cur(context, state)
    reply = (update.message or update.effective_message).reply_text

    if state == OrderStates.PRODUCT:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é
        await reply("–û–±–Ω–æ–≤–ª—è—é –º–µ–Ω—é‚Ä¶", reply_markup=get_keyboard_remove())
        await reply(ASK_PRODUCT, reply_markup=get_product_keyboard())
        return OrderStates.PRODUCT

    elif state == OrderStates.BC_QTY:
        await reply(ASK_BC_QTY, reply_markup=get_bc_qty_keyboard())
        return OrderStates.BC_QTY

    elif state == OrderStates.BC_SIZE:
        await reply(ASK_BC_SIZE, reply_markup=get_bc_size_keyboard())
        await reply(INFO_BC_PAPER)
        return OrderStates.BC_SIZE

    elif state == OrderStates.BC_SIDES:
        await reply(ASK_BC_SIDES, reply_markup=get_sides_keyboard())
        return OrderStates.BC_SIDES

    elif state == OrderStates.FLY_FORMAT:
        await reply(ASK_FLY_FORMAT, reply_markup=get_fly_format_keyboard())
        return OrderStates.FLY_FORMAT

    elif state == OrderStates.FLY_SIDES:
        await reply(ASK_FLY_SIDES, reply_markup=get_sides_keyboard())
        return OrderStates.FLY_SIDES

    elif state == OrderStates.ORDER_UPLOAD:
        await reply(UPLOAD_PROMPT.format(max_mb=25), reply_markup=get_upload_keyboard())
        return OrderStates.ORDER_UPLOAD

    elif state == OrderStates.ORDER_DUE:
        await reply(ASK_DUE, reply_markup=get_notes_keyboard())
        return OrderStates.ORDER_DUE

    elif state == OrderStates.ORDER_PHONE:
        await reply(ASK_PHONE, reply_markup=get_notes_keyboard())
        return OrderStates.ORDER_PHONE

    elif state == OrderStates.ORDER_NOTES:
        await reply(ASK_NOTES, reply_markup=get_notes_keyboard())
        return OrderStates.ORDER_NOTES

    elif state == OrderStates.ORDER_CONFIRM:
        order_summary = FormattingService.format_order_summary(context.user_data)
        await reply(
            f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n\n{order_summary}",
            reply_markup=get_confirm_keyboard(),
        )
        return OrderStates.ORDER_CONFIRM

    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    elif state == OrderStates.ORDER_SHEET_FORMAT:
        await reply(ASK_SHEET_FORMAT, reply_markup=get_format_selection_keyboard())
        return OrderStates.ORDER_SHEET_FORMAT

    elif state == OrderStates.ORDER_CUSTOM_SIZE:
        await reply(ASK_CUSTOM_SIZE, reply_markup=get_keyboard_remove())
        return OrderStates.ORDER_CUSTOM_SIZE

    elif state == OrderStates.ORDER_POSTPRESS:
        lamination = context.user_data.get("lamination", "none")
        bigovka_count = context.user_data.get("bigovka_count", 0)
        corner_rounding = context.user_data.get("corner_rounding", False)
        await reply(
            ASK_POSTPRESS,
            reply_markup=get_postpress_keyboard(lamination, bigovka_count, corner_rounding)
        )
        return OrderStates.ORDER_POSTPRESS

    elif state == OrderStates.ORDER_POSTPRESS_BIGOVKA:
        await reply(ASK_BIGOVKA_COUNT, reply_markup=get_keyboard_remove())
        return OrderStates.ORDER_POSTPRESS_BIGOVKA

    elif state == OrderStates.CANCEL_CHOICE:
        await reply(ASK_CANCEL_CHOICE, reply_markup=get_cancel_choice_keyboard())
        return OrderStates.CANCEL_CHOICE

    elif state == OrderStates.ORDER_BANNER_SIZE:
        await reply(ASK_BANNER_SIZE, reply_markup=get_banner_size_keyboard())
        return OrderStates.ORDER_BANNER_SIZE

    elif state == OrderStates.ORDER_MATERIAL:
        await reply(ASK_MATERIAL, reply_markup=get_material_keyboard())
        return OrderStates.ORDER_MATERIAL

    elif state == OrderStates.ORDER_PRINT_COLOR:
        await reply(ASK_PRINT_COLOR, reply_markup=get_print_color_keyboard())
        return OrderStates.ORDER_PRINT_COLOR

    elif state == OrderStates.PRINT_FORMAT:
        await reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –±—É–º–∞–≥–∏:", reply_markup=ReplyKeyboardMarkup(
            [["A4 (210√ó297 –º–º)", "A3 (297√ó420 –º–º)"],
             [BTN_BACK, BTN_CANCEL]],
            resize_keyboard=True
        ))
        return OrderStates.PRINT_FORMAT

    elif state == OrderStates.PRINT_TYPE:
        await reply("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—á–∞—Ç–∏:", reply_markup=ReplyKeyboardMarkup(
            [["üñ§ –ß—ë—Ä–Ω–æ-–±–µ–ª–∞—è", "üé® –¶–≤–µ—Ç–Ω–∞—è"],
             [BTN_BACK, BTN_CANCEL]],
            resize_keyboard=True
        ))
        return OrderStates.PRINT_TYPE

    # –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    context.user_data.clear()
    await reply("–ß–µ–º –µ—â—ë –ø–æ–º–æ—á—å?", reply_markup=get_home_keyboard())
    return ConversationHandler.END


async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞–∫–∞–∑–∞."""
    context.user_data.clear()
    context.user_data["flow"] = "order"
    return await render_state(update, context, OrderStates.PRODUCT)


async def handle_product(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞."""
    set_cur(context, OrderStates.PRODUCT)
    if is_duplicate(update, context):
        return get_cur(context) or ConversationHandler.END
    
    text = (update.message.text or "").strip()

    # –í–∏–∑–∏—Ç–∫–∏ ‚Üí —Å–Ω–∞—á–∞–ª–∞ —Ç–∏—Ä–∞–∂ (–º–∏–Ω–∏–º—É–º 50, –∫—Ä–∞—Ç–Ω–æ 50) ‚Üí —Ñ–∏–∫—Å. —Ñ–æ—Ä–º–∞—Ç ¬´90√ó50¬ª, –±—É–º–∞–≥–∞ 300 –≥/–º¬≤ ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã ‚Üí –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ PDF ‚Üí —Å—Ä–æ–∫ ‚Üí —Ç–µ–ª–µ—Ñ–æ–Ω ‚Üí –ø–æ–∂–µ–ª–∞–Ω–∏—è ‚Üí –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if is_btn(text, "–≤–∏–∑–∏—Ç–∫–∏"):
        context.user_data["what_to_print"] = "–í–∏–∑–∏—Ç–∫–∏"
        context.user_data["product_type"] = "bc"
        context.user_data["format"] = "90√ó50 –º–º"
        context.user_data["paper"] = "300 –≥/–º¬≤"
        set_cur(context, OrderStates.BC_QTY)
        push_state(context, OrderStates.BC_QTY)
        return await render_state(update, context, OrderStates.BC_QTY)

    # –§–ª–∞–µ—Ä—ã ‚Üí —Ñ–æ—Ä–º–∞—Ç –ê7‚Äì–ê4 –∏–ª–∏ –í–∞—à —Ä–∞–∑–º–µ—Ä (–º–º) ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã ‚Üí –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ PDF ‚Üí ‚Ä¶ (–¥–∞–ª–µ–µ –∫–∞–∫ –≤—ã—à–µ)
    if is_btn(text, "—Ñ–ª–∞–µ—Ä—ã"):
        context.user_data["what_to_print"] = "–§–ª–∞–µ—Ä—ã"
        context.user_data["product_type"] = "fly"
        set_cur(context, OrderStates.ORDER_SHEET_FORMAT)
        push_state(context, OrderStates.ORDER_SHEET_FORMAT)
        return await render_state(update, context, OrderStates.ORDER_SHEET_FORMAT)

    # –ë–∞–Ω–Ω–µ—Ä—ã ‚Üí –≤–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –≤ –º–µ—Ç—Ä–∞—Ö (0.1‚Äì20.0, –±–µ–∑ —Å—Ç–æ—Ä–æ–Ω) ‚Üí –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ PDF ‚Üí ‚Ä¶
    if is_btn(text, "–±–∞–Ω–Ω–µ—Ä—ã"):
        context.user_data["what_to_print"] = "–ë–∞–Ω–Ω–µ—Ä—ã"
        context.user_data["product_type"] = "banner"
        set_cur(context, OrderStates.ORDER_BANNER_SIZE)
        push_state(context, OrderStates.ORDER_BANNER_SIZE)
        return await render_state(update, context, OrderStates.ORDER_BANNER_SIZE)

    # –ü–ª–∞–∫–∞—Ç—ã ‚Üí —Ñ–æ—Ä–º–∞—Ç A3/A2/A1 –∏–ª–∏ –í–∞—à —Ä–∞–∑–º–µ—Ä (–º–º) ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã ‚Üí –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ PDF ‚Üí ‚Ä¶
    if is_btn(text, "–ø–ª–∞–∫–∞—Ç—ã"):
        context.user_data["what_to_print"] = "–ü–ª–∞–∫–∞—Ç—ã"
        context.user_data["product_type"] = "poster"
        set_cur(context, OrderStates.ORDER_SHEET_FORMAT)
        push_state(context, OrderStates.ORDER_SHEET_FORMAT)
        return await render_state(update, context, OrderStates.ORDER_SHEET_FORMAT)

    # –ù–∞–∫–ª–µ–π–∫–∏ ‚Üí —Ñ–æ—Ä–º–∞—Ç A6‚ÄìA3 –∏–ª–∏ –í–∞—à —Ä–∞–∑–º–µ—Ä (–º–º) ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª: –±—É–º–∞–≥–∞/–≤–∏–Ω–∏–ª ‚Üí —Ü–≤–µ—Ç–Ω–æ—Å—Ç—å: –ß/–ë –∏–ª–∏ —Ü–≤–µ—Ç ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ) ‚Üí –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ PDF ‚Üí ‚Ä¶
    if is_btn(text, "–Ω–∞–∫–ª–µ–π–∫–∏"):
        context.user_data["what_to_print"] = "–ù–∞–∫–ª–µ–π–∫–∏"
        context.user_data["product_type"] = "sticker"
        set_cur(context, OrderStates.ORDER_SHEET_FORMAT)
        push_state(context, OrderStates.ORDER_SHEET_FORMAT)
        return await render_state(update, context, OrderStates.ORDER_SHEET_FORMAT)

    # –õ–∏—Å—Ç—ã ‚Üí —Ñ–æ—Ä–º–∞—Ç A4/A3 ‚Üí —Ç–∏–ø –ø–µ—á–∞—Ç–∏ –ß/–ë –∏–ª–∏ —Ü–≤–µ—Ç ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ PDF ‚Üí ‚Ä¶
    if is_btn(text, "–ª–∏—Å—Ç—ã"):
        context.user_data["what_to_print"] = "–õ–∏—Å—Ç—ã"
        context.user_data["product_type"] = "sheets"
        set_cur(context, OrderStates.ORDER_SHEET_FORMAT)
        push_state(context, OrderStates.ORDER_SHEET_FORMAT)
        return await render_state(update, context, OrderStates.ORDER_SHEET_FORMAT)

    # –î—Ä—É–≥–æ–µ ‚Üí —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è ‚Üí –∑–∞–≥—Ä—É–∑–∫–∞ PDF (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Üí ‚Ä¶
    if is_btn(text, "–¥—Ä—É–≥–æ–µ"):
        context.user_data["what_to_print"] = "–î—Ä—É–≥–æ–µ"
        context.user_data["product_type"] = "other"
        set_cur(context, OrderStates.ORDER_SHEET_FORMAT)
        push_state(context, OrderStates.ORDER_SHEET_FORMAT)
        return await render_state(update, context, OrderStates.ORDER_SHEET_FORMAT)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if is_btn(text, "–Ω–∞–∑–∞–¥"):
        return await handle_back(update, context)
    
    if is_btn(text, "–æ—Ç–º–µ–Ω–∞"):
        return await handle_cancel(update, context)

    # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ - –º—è–≥–∫–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    await update.message.reply_text(REMIND_USE_BTNS, reply_markup=get_product_keyboard())
    return OrderStates.PRODUCT


async def handle_bc_qty(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–∏—Ä–∞–∂–∞ –≤–∏–∑–∏—Ç–æ–∫."""
    set_cur(context, OrderStates.BC_QTY)
    if is_duplicate(update, context):
        return get_cur(context) or ConversationHandler.END
    text = (update.message.text or "").strip()

    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)

    n = to_int(text)
    if n is None:
        await update.message.reply_text(ERR_INT, reply_markup=get_bc_qty_keyboard())
        return OrderStates.BC_QTY

    if not is_multiple_of_50(n):
        # –≤–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –º–∏–Ω–∏–º—É–º 50 –∏ –∫—Ä–∞—Ç–Ω–æ—Å—Ç–∏ 50
        await update.message.reply_text(ERR_BC_STEP, reply_markup=get_bc_qty_keyboard())
        return OrderStates.BC_QTY

    context.user_data["quantity"] = n
    set_cur(context, OrderStates.BC_SIZE)
    push_state(context, OrderStates.BC_SIZE)
    return await render_state(update, context, OrderStates.BC_SIZE)


async def handle_bc_size(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ –≤–∏–∑–∏—Ç–æ–∫."""
    set_cur(context, OrderStates.BC_SIZE)
    if is_duplicate(update, context):
        return get_cur(context) or ConversationHandler.END
    text = (update.message.text or "").strip()

    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)

    if text == BTN_BC_SIZE:
        context.user_data["format"] = "90√ó50"
        context.user_data["paper"] = "300 –≥/–º¬≤"
        set_cur(context, OrderStates.BC_SIDES)
        push_state(context, OrderStates.BC_SIDES)
        return await render_state(update, context, OrderStates.BC_SIDES)

    await update.message.reply_text(REMIND_USE_BTNS, reply_markup=get_bc_size_keyboard())
    return OrderStates.BC_SIZE


async def handle_bc_sides(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω –ø–µ—á–∞—Ç–∏ –≤–∏–∑–∏—Ç–æ–∫."""
    set_cur(context, OrderStates.BC_SIDES)
    if is_duplicate(update, context):
        return get_cur(context) or ConversationHandler.END
    text = (update.message.text or "").strip()

    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)

    if text == BTN_1:
        context.user_data["sides"] = "1"
    elif text == BTN_2:
        context.user_data["sides"] = "2"
    else:
        await update.message.reply_text(REMIND_USE_BTNS, reply_markup=get_sides_keyboard())
        return OrderStates.BC_SIDES

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ
    set_cur(context, OrderStates.ORDER_POSTPRESS)
    push_state(context, OrderStates.ORDER_POSTPRESS)
    return await render_state(update, context, OrderStates.ORDER_POSTPRESS)


async def handle_fly_format(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –±—É–∫–ª–µ—Ç–∞."""
    set_cur(context, OrderStates.FLY_FORMAT)
    if is_duplicate(update, context):
        return get_cur(context) or ConversationHandler.END
    text = (update.message.text or "").strip()

    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)

    result = parse_fly_choice(text)
    if result:
        format_name, (w, h) = result
        context.user_data["format"] = f"{format_name} {w}√ó{h}"
        set_cur(context, OrderStates.FLY_SIDES)
        push_state(context, OrderStates.FLY_SIDES)
        return await render_state(update, context, OrderStates.FLY_SIDES)

    await update.message.reply_text(REMIND_USE_BTNS, reply_markup=get_fly_format_keyboard())
    return OrderStates.FLY_FORMAT


async def handle_fly_sides(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç–æ—Ä–æ–Ω –ø–µ—á–∞—Ç–∏ –±—É–∫–ª–µ—Ç–∞."""
    set_cur(context, OrderStates.FLY_SIDES)
    if is_duplicate(update, context):
        return get_cur(context) or ConversationHandler.END
    text = (update.message.text or "").strip()

    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)

    if text == BTN_1:
        context.user_data["sides"] = "1"
    elif text == BTN_2:
        context.user_data["sides"] = "2"
    else:
        await update.message.reply_text(REMIND_USE_BTNS, reply_markup=get_sides_keyboard())
        return OrderStates.FLY_SIDES

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ
    set_cur(context, OrderStates.ORDER_POSTPRESS)
    push_state(context, OrderStates.ORDER_POSTPRESS)
    return await render_state(update, context, OrderStates.ORDER_POSTPRESS)


async def handle_upload(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É –º–∞–∫–µ—Ç–∞ (—Ç–æ–ª—å–∫–æ PDF)."""
    set_cur(context, OrderStates.ORDER_UPLOAD)
    if is_duplicate(update, context):
        return get_cur(context) or ConversationHandler.END

    # –î–æ–∫—É–º–µ–Ω—Ç
    if update.message.document:
        doc = update.message.document
        if not (doc.mime_type or "").startswith("application/pdf"):
            await update.message.reply_text(ERR_ONLY_PDF, reply_markup=get_upload_keyboard())
            return OrderStates.ORDER_UPLOAD

        context.user_data.setdefault("attachments", []).append({
            "file_id": doc.file_id,
            "file_unique_id": doc.file_unique_id,
            "original_name": doc.file_name or "document.pdf",
            "mime_type": doc.mime_type,
            "size": doc.file_size or 0,
            "tg_message_id": update.message.message_id,
            "from_chat_id": update.effective_chat.id,
            "kind": "document",
        })
        await update.message.reply_text(UPLOAD_OK, reply_markup=get_upload_keyboard())
        return OrderStates.ORDER_UPLOAD

    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
    if update.message.text:
        text = update.message.text.strip()

        if text in (BTN_BACK, BTN_CANCEL):
            return await handle_back(update, context)

        if NEXT_RE.match(text):
            atts = context.user_data.get("attachments", [])
            has_pdf = any((a.get("mime_type") or "").startswith("application/pdf") for a in atts)
            if not has_pdf:
                await update.message.reply_text(ERR_ONLY_PDF, reply_markup=get_upload_keyboard())
                return OrderStates.ORDER_UPLOAD

            set_cur(context, OrderStates.ORDER_DUE)
            push_state(context, OrderStates.ORDER_DUE)
            return await render_state(update, context, OrderStates.ORDER_DUE)

        await update.message.reply_text(REMIND_USE_BTNS, reply_markup=get_upload_keyboard())
        return OrderStates.ORDER_UPLOAD

    await update.message.reply_text(REMIND_USE_BTNS, reply_markup=get_upload_keyboard())
    return OrderStates.ORDER_UPLOAD


async def handle_due(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."""
    set_cur(context, OrderStates.ORDER_DUE)
    if is_duplicate(update, context):
        return get_cur(context) or ConversationHandler.END
    text = (update.message.text or "").strip()

    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)

    try:
        due_date = parse_due(text, config.TIMEZONE)
        if not due_date:
            await update.message.reply_text(ERR_DATE, reply_markup=get_notes_keyboard())
            return OrderStates.ORDER_DUE

        context.user_data["deadline_at"] = due_date
        set_cur(context, OrderStates.ORDER_PHONE)
        push_state(context, OrderStates.ORDER_PHONE)
        return await render_state(update, context, OrderStates.ORDER_PHONE)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã: %s", e)
        await update.message.reply_text(ERR_DATE, reply_markup=get_notes_keyboard())
        return OrderStates.ORDER_DUE


async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞."""
    set_cur(context, OrderStates.ORDER_PHONE)
    if is_duplicate(update, context):
        return get_cur(context) or ConversationHandler.END
    text = (update.message.text or "").strip()

    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)

    phone = normalize_phone(text)
    if not phone:
        await update.message.reply_text(ERR_PHONE, reply_markup=get_notes_keyboard())
        return OrderStates.ORDER_PHONE

    context.user_data["contact"] = phone
    set_cur(context, OrderStates.ORDER_NOTES)
    push_state(context, OrderStates.ORDER_NOTES)
    return await render_state(update, context, OrderStates.ORDER_NOTES)


async def handle_notes(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–∂–µ–ª–∞–Ω–∏–π."""
    set_cur(context, OrderStates.ORDER_NOTES)
    if is_duplicate(update, context):
        return get_cur(context) or ConversationHandler.END
    text = (update.message.text or "").strip()

    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)

    if SKIP_RE.match(text) or not text:
        context.user_data["notes"] = ""
    else:
        context.user_data["notes"] = text[:1000]

    set_cur(context, OrderStates.ORDER_CONFIRM)
    push_state(context, OrderStates.ORDER_CONFIRM)
    return await render_state(update, context, OrderStates.ORDER_CONFIRM)


async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞."""
    set_cur(context, OrderStates.ORDER_CONFIRM)
    text = (update.message.text or "").strip()

    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)

    if SUBMIT_RE.match(text):
        success, order = await create_order(update, context)
        if success and order:
            # –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            success_message = (
                f"‚úÖ <b>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
                f"üìã <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {order.code}\n"
                f"üìù <b>–ß—Ç–æ –ø–µ—á–∞—Ç–∞—Ç—å:</b> {order.what_to_print}\n"
                f"üî¢ <b>–¢–∏—Ä–∞–∂:</b> {order.quantity} —à—Ç.\n"
                f"üìÑ <b>–§–æ—Ä–º–∞—Ç:</b> {order.format or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
                f"üìû <b>–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</b>\n"
                f"–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.\n\n"
                f"üí¨ –î–ª—è —Å–≤—è–∑–∏ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /call_operator"
            )
            await update.message.reply_text(
                success_message,
                reply_markup=get_home_keyboard(),
                parse_mode='HTML'
            )
            context.user_data.clear()
            return ConversationHandler.END
        else:
            # –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
            error_message = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:\n"
                "‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ\n"
                "‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É: /call_operator\n"
                "‚Ä¢ –ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
                "–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞!"
            )
            await update.message.reply_text(
                error_message,
                reply_markup=get_home_keyboard(),
                parse_mode='HTML'
            )
            context.user_data.clear()
            return ConversationHandler.END

    await update.message.reply_text(REMIND_USE_BTNS, reply_markup=get_confirm_keyboard())
    return OrderStates.ORDER_CONFIRM


async def create_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> Tuple[bool, Optional[Order]]:
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —à–ª—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º."""
    db = None
    try:
        db = get_db()
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            db.execute("SELECT 1 FROM users LIMIT 1")
            db.execute("SELECT 1 FROM orders LIMIT 1") 
            db.execute("SELECT 1 FROM attachments LIMIT 1")
        except Exception as table_error:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–∞–º: {table_error}")
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
            from database import create_tables
            create_tables()

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        db_user = db.query(User).filter(User.tg_user_id == user.id).first()
        if not db_user:
            db_user = User(
                tg_user_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
            )
            db.add(db_user)
            db.commit()
            db.refresh(db_user)

        # –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞
        order_code = generate_order_code()

        # –ó–∞–∫–∞–∑
        order = Order(
            code=order_code,
            user_id=db_user.id,
            what_to_print=context.user_data.get("what_to_print", ""),
            quantity=context.user_data.get("quantity", 0),
            format=context.user_data.get("format", ""),
            sides=context.user_data.get("sides", ""),
            paper=context.user_data.get("paper", ""),
            deadline_at=context.user_data.get("deadline_at"),
            contact=context.user_data.get("contact", ""),
            notes=context.user_data.get("notes", ""),
            # –ù–æ–≤—ã–µ –ø–æ–ª—è
            lamination=context.user_data.get("lamination", "none"),
            bigovka_count=context.user_data.get("bigovka_count", 0),
            corner_rounding=context.user_data.get("corner_rounding", False),
            sheet_format=context.user_data.get("sheet_format", ""),
            custom_size_mm=context.user_data.get("custom_size_mm", ""),
            material=context.user_data.get("material", ""),
            print_color=context.user_data.get("print_color", "color"),
            status=OrderStatus.NEW,
        )
        db.add(order)
        db.commit()
        db.refresh(order)

        # –í–ª–æ–∂–µ–Ω–∏—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        attachments_data = context.user_data.get("attachments", [])
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ {len(attachments_data)} –≤–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.code}")
        
        for att in attachments_data:
            try:
                attachment = Attachment(
                    order_id=order.id,
                    file_id=att["file_id"],
                    file_unique_id=att.get("file_unique_id"),
                    original_name=att.get("original_name"),
                    mime_type=att.get("mime_type"),
                    size_bytes=att.get("size", 0),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º size_bytes
                    size=att.get("size", 0),        # –ò size –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    tg_message_id=att.get("tg_message_id"),
                    from_chat_id=att.get("from_chat_id"),
                    kind=att.get("kind", "document"),
                )
                db.add(attachment)
            except Exception as att_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–ª–æ–∂–µ–Ω–∏—è: {att_error}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–¥–Ω–æ –≤–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å

        db.commit()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
        try:
            await send_order_to_operators(context.bot, order, db_user)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.code}")
        except Exception as notify_error:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º: {notify_error}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        logger.info(f"‚úÖ –ó–∞–∫–∞–∑ {order.code} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
        return True, order

    except Exception as e:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: %s", e)
        if db:
            try:
                db.rollback()
            except Exception as rollback_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {rollback_error}")
        return False, None
    finally:
        if db:
            try:
                db.close()
            except Exception as close_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–µ—Å—Å–∏–∏ –ë–î: {close_error}")


def generate_order_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYMMDD-XXXX."""
    now = datetime.now()
    date_part = now.strftime("%y%m%d")
    db = get_db()
    try:
        today_orders = db.query(Order).filter(Order.code.like(f"{date_part}-%")).count()
        number_part = f"{today_orders + 1:04d}"
        return f"{date_part}-{number_part}"
    finally:
        db.close()


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∏ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏

async def handle_sheet_format(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ª–∏—Å—Ç–∞."""
    text = update.message.text.strip()
    product_type = context.user_data.get("product_type", "")
    
    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
    if text == "A7 (105√ó74 –º–º)":
        context.user_data["sheet_format"] = "A7"
        context.user_data["format"] = "105√ó74"
    elif text == "A6 (148√ó105 –º–º)":
        context.user_data["sheet_format"] = "A6"
        context.user_data["format"] = "148√ó105"
    elif text == "A5 (210√ó148 –º–º)":
        context.user_data["sheet_format"] = "A5"
        context.user_data["format"] = "210√ó148"
    elif text == "A4 (297√ó210 –º–º)":
        context.user_data["sheet_format"] = "A4"
        context.user_data["format"] = "297√ó210"
    elif text == "A3 (420√ó297 –º–º)":
        context.user_data["sheet_format"] = "A3"
        context.user_data["format"] = "420√ó297"
    elif text == "A2 (594√ó420 –º–º)":
        context.user_data["sheet_format"] = "A2"
        context.user_data["format"] = "594√ó420"
    elif text == "A1 (841√ó594 –º–º)":
        context.user_data["sheet_format"] = "A1"
        context.user_data["format"] = "841√ó594"
    elif text == "–í–∞—à —Ä–∞–∑–º–µ—Ä":
        push_state(context, OrderStates.ORDER_SHEET_FORMAT)
        set_cur(context, OrderStates.ORDER_CUSTOM_SIZE)
        await update.message.reply_text(
            ASK_CUSTOM_SIZE,
            reply_markup=get_keyboard_remove()
        )
        return OrderStates.ORDER_CUSTOM_SIZE
    else:
        await update.message.reply_text(REMIND_USE_BTNS)
        return OrderStates.ORDER_SHEET_FORMAT
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    push_state(context, OrderStates.ORDER_SHEET_FORMAT)
    
    if product_type == "sticker":
        # –î–ª—è –Ω–∞–∫–ª–µ–µ–∫: —Ñ–æ—Ä–º–∞—Ç ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª ‚Üí —Ü–≤–µ—Ç–Ω–æ—Å—Ç—å ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã
        set_cur(context, OrderStates.ORDER_MATERIAL)
        await update.message.reply_text(
            ASK_MATERIAL,
            reply_markup=get_material_keyboard()
        )
        return OrderStates.ORDER_MATERIAL
    elif product_type == "sheets":
        # –î–ª—è –ª–∏—Å—Ç–æ–≤: —Ñ–æ—Ä–º–∞—Ç ‚Üí —Ü–≤–µ—Ç–Ω–æ—Å—Ç—å ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã
        set_cur(context, OrderStates.ORDER_PRINT_COLOR)
        await update.message.reply_text(
            ASK_PRINT_COLOR,
            reply_markup=get_print_color_keyboard()
        )
        return OrderStates.ORDER_PRINT_COLOR
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö: —Ñ–æ—Ä–º–∞—Ç ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã
        set_cur(context, OrderStates.BC_SIDES)
        await update.message.reply_text(
            ASK_BC_SIDES,
            reply_markup=get_sides_keyboard()
        )
        return OrderStates.BC_SIDES


async def handle_custom_size(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."""
    text = update.message.text.strip()
    product_type = context.user_data.get("product_type", "")
    
    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)
    
    size = parse_custom_size(text)
    if not size:
        await update.message.reply_text(ERR_SIZE_FORMAT)
        return OrderStates.ORDER_CUSTOM_SIZE
    
    width, height = size
    context.user_data["sheet_format"] = "custom"
    context.user_data["custom_size_mm"] = f"{width}√ó{height} –º–º"
    context.user_data["format"] = f"{width}√ó{height} –º–º"
    
    push_state(context, OrderStates.ORDER_CUSTOM_SIZE)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ü–∏–∏
    if product_type == "sticker":
        # –î–ª—è –Ω–∞–∫–ª–µ–µ–∫: —Ä–∞–∑–º–µ—Ä ‚Üí –º–∞—Ç–µ—Ä–∏–∞–ª ‚Üí —Ü–≤–µ—Ç–Ω–æ—Å—Ç—å ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã
        set_cur(context, OrderStates.ORDER_MATERIAL)
        await update.message.reply_text(
            ASK_MATERIAL,
            reply_markup=get_material_keyboard()
        )
        return OrderStates.ORDER_MATERIAL
    elif product_type == "sheets":
        # –î–ª—è –ª–∏—Å—Ç–æ–≤: —Ä–∞–∑–º–µ—Ä ‚Üí —Ü–≤–µ—Ç–Ω–æ—Å—Ç—å ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã
        set_cur(context, OrderStates.ORDER_PRINT_COLOR)
        await update.message.reply_text(
            ASK_PRINT_COLOR,
            reply_markup=get_print_color_keyboard()
        )
        return OrderStates.ORDER_PRINT_COLOR
    else:
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö: —Ä–∞–∑–º–µ—Ä ‚Üí —Å—Ç–æ—Ä–æ–Ω—ã
        set_cur(context, OrderStates.BC_SIDES)
        await update.message.reply_text(
            ASK_BC_SIDES,
            reply_markup=get_sides_keyboard()
        )
        return OrderStates.BC_SIDES


async def handle_postpress(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ—Å—Ç–ø–µ—á–∞—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    text = update.message.text.strip()

    lamination = context.user_data.get("lamination", "none")
    bigovka_count = context.user_data.get("bigovka_count", 0)
    corner_rounding = context.user_data.get("corner_rounding", False)

    if text.startswith("–õ–∞–º–∏–Ω–∞—Ü–∏—è"):
        if "(–º–∞—Ç)" in text:
            context.user_data["lamination"] = "matte"
        elif "(–≥–ª—è–Ω–µ—Ü)" in text:
            context.user_data["lamination"] = "glossy"
        else:
            context.user_data["lamination"] = "none"
        return await render_state(update, context, OrderStates.ORDER_POSTPRESS)

    elif text == "–ë–∏–≥–æ–≤–∫–∞" or text.startswith("–ë–∏–≥–æ–≤–∫–∞ ("):
        push_state(context, OrderStates.ORDER_POSTPRESS)
        set_cur(context, OrderStates.ORDER_POSTPRESS_BIGOVKA)
        await update.message.reply_text(ASK_BIGOVKA_COUNT, reply_markup=get_keyboard_remove())
        return OrderStates.ORDER_POSTPRESS_BIGOVKA

    elif text.startswith("–°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤"):
        context.user_data["corner_rounding"] = not corner_rounding
        return await render_state(update, context, OrderStates.ORDER_POSTPRESS)

    elif text == "–ë–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏":
        context.user_data.update({
            "lamination": "none",
            "bigovka_count": 0,
            "corner_rounding": False
        })
        # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —à–∞–≥–µ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏
        return await render_state(update, context, OrderStates.ORDER_POSTPRESS)

    elif text == "‚û°Ô∏è –î–∞–ª–µ–µ":
        push_state(context, OrderStates.ORDER_POSTPRESS)
        set_cur(context, OrderStates.ORDER_UPLOAD)
        await update.message.reply_text(
            f"{UPLOAD_PROMPT.format(max_mb=config.MAX_UPLOAD_MB)}\n\n{LAYOUT_HINT}",
            reply_markup=get_upload_keyboard()
        )
        return OrderStates.ORDER_UPLOAD

    elif text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)

    else:
        await update.message.reply_text(
            REMIND_USE_BTNS,
            reply_markup=get_postpress_keyboard(
                context.user_data.get("lamination", "none"),
                context.user_data.get("bigovka_count", 0),
                context.user_data.get("corner_rounding", False),
            )
        )
        return OrderStates.ORDER_POSTPRESS


async def handle_postpress_bigovka(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–∏–Ω–∏–π –±–∏–≥–æ–≤–∫–∏."""
    text = update.message.text.strip()

    count = parse_bigovka_count(text)
    if count is None:
        await update.message.reply_text(
            ERR_BIGOVKA_INT,
            reply_markup=get_postpress_keyboard(
                context.user_data.get("lamination", "none"),
                context.user_data.get("bigovka_count", 0),
                context.user_data.get("corner_rounding", False),
            )
        )
        return OrderStates.ORDER_POSTPRESS_BIGOVKA

    context.user_data["bigovka_count"] = count

    await update.message.reply_text(
        f"‚úÖ –ë–∏–≥–æ–≤–∫–∞ ({count} –ª–∏–Ω–∏–π) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
    )
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏, –Ω–∏—á–µ–≥–æ –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—è
    return await render_state(update, context, OrderStates.ORDER_POSTPRESS)


async def handle_cancel_choice(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–º–µ–Ω—ã."""
    text = update.message.text.strip()
    
    if text == "‚Ü©Ô∏è –¢–æ–ª—å–∫–æ —ç—Ç–æ—Ç —à–∞–≥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
        prev = pop_state(context)
        if prev == ConversationHandler.END:
            cur = get_cur(context)
            target = PREV_OF.get(cur)
            if not target:
                context.user_data.clear()
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É",
                    reply_markup=get_home_keyboard()
                )
                return ConversationHandler.END
            set_cur(context, target)
        else:
            set_cur(context, prev)
        
        # –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await render_state(update, context)
        return get_cur(context)
        
    elif text == "üóë –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑":
        # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=get_home_keyboard()
        )
        return ConversationHandler.END
    
    else:
        await update.message.reply_text(REMIND_USE_BTNS)
        return OrderStates.CANCEL_CHOICE


async def handle_cancel(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞' - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –æ—Ç–º–µ–Ω—ã."""
    await update.message.reply_text(
        ASK_CANCEL_CHOICE,
        reply_markup=get_cancel_choice_keyboard()
    )
    return OrderStates.CANCEL_CHOICE


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ü–∏–∏

async def handle_banner_size(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ –±–∞–Ω–Ω–µ—Ä–∞."""
    text = update.message.text.strip()
    
    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)
    
    size = parse_banner_size(text)
    if not size:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ä–∞. –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –≤ –º–µ—Ç—Ä–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 2√ó1.5")
        return OrderStates.ORDER_BANNER_SIZE
    
    width, height = size
    context.user_data["sheet_format"] = "custom"
    context.user_data["custom_size_mm"] = f"{width}√ó{height} –º"
    context.user_data["format"] = f"{width}√ó{height} –º"
    
    # –î–ª—è –±–∞–Ω–Ω–µ—Ä–æ–≤ –Ω–µ—Ç –≤—ã–±–æ—Ä–∞ —Å—Ç–æ—Ä–æ–Ω, —Å—Ä–∞–∑—É –∫ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–µ
    push_state(context, OrderStates.ORDER_BANNER_SIZE)
    set_cur(context, OrderStates.ORDER_POSTPRESS)
    return await render_state(update, context, OrderStates.ORDER_POSTPRESS)


async def handle_material(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –¥–ª—è –Ω–∞–∫–ª–µ–µ–∫."""
    text = update.message.text.strip()
    
    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)
    
    if text == "üìÑ –ë—É–º–∞–≥–∞":
        context.user_data["material"] = "paper"
    elif text == "üéØ –í–∏–Ω–∏–ª":
        context.user_data["material"] = "vinyl"
    else:
        await update.message.reply_text(REMIND_USE_BTNS)
        return OrderStates.ORDER_MATERIAL
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ü–≤–µ—Ç–Ω–æ—Å—Ç–∏
    push_state(context, OrderStates.ORDER_MATERIAL)
    set_cur(context, OrderStates.ORDER_PRINT_COLOR)
    return await render_state(update, context, OrderStates.ORDER_PRINT_COLOR)


async def handle_print_color(update, context):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–Ω–æ—Å—Ç–∏ –ø–µ—á–∞—Ç–∏."""
    text = update.message.text.strip()
    
    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)
    
    if text == "üé® –¶–≤–µ—Ç–Ω–∞—è":
        context.user_data["print_color"] = "color"
    elif text == "‚ö´ –ß/–ë":
        context.user_data["print_color"] = "bw"
    else:
        await update.message.reply_text(REMIND_USE_BTNS)
        return OrderStates.ORDER_PRINT_COLOR
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–æ—Ä–æ–Ω
    push_state(context, OrderStates.ORDER_PRINT_COLOR)
    set_cur(context, OrderStates.BC_SIDES)
    return await render_state(update, context, OrderStates.BC_SIDES)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø–µ—á–∞—Ç–∏

async def handle_print_format(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø–µ—á–∞—Ç–∏."""
    text = update.message.text.strip()
    
    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)
    
    if text == "A4 (210√ó297 –º–º)":
        context.user_data["sheet_format"] = "A4"
        context.user_data["format"] = "210√ó297"
    elif text == "A3 (297√ó420 –º–º)":
        context.user_data["sheet_format"] = "A3"
        context.user_data["format"] = "297√ó420"
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤.")
        return OrderStates.PRINT_FORMAT
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –ø–µ—á–∞—Ç–∏
    push_state(context, OrderStates.PRINT_FORMAT)
    set_cur(context, OrderStates.PRINT_TYPE)
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—á–∞—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(
            [["üñ§ –ß—ë—Ä–Ω–æ-–±–µ–ª–∞—è", "üé® –¶–≤–µ—Ç–Ω–∞—è"],
             [BTN_BACK, BTN_CANCEL]],
            resize_keyboard=True
        )
    )
    return OrderStates.PRINT_TYPE


async def handle_print_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–µ—á–∞—Ç–∏."""
    text = update.message.text.strip().lower()
    
    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)
    
    if "—á—ë—Ä" in text or "—á–µ—Ä–Ω" in text:
        context.user_data["print_color"] = "bw"
    elif "—Ü–≤–µ—Ç" in text:
        context.user_data["print_color"] = "color"
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∏–ø –ø–µ—á–∞—Ç–∏.")
        return OrderStates.PRINT_TYPE
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
    push_state(context, OrderStates.PRINT_TYPE)
    set_cur(context, OrderStates.ORDER_UPLOAD)
    await update.message.reply_text(
        f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª –¥–ª—è –ø–µ—á–∞—Ç–∏ (PDF –¥–æ {config.MAX_UPLOAD_MB} –ú–ë).",
        reply_markup=get_upload_keyboard()
    )
    return OrderStates.ORDER_UPLOAD


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø–µ—á–∞—Ç–∏

async def handle_print_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—ã—á–Ω–∞—è –ø–µ—á–∞—Ç—å: –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞."""
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –±—É–º–∞–≥–∏:",
        reply_markup=get_print_format_keyboard()
    )
    return OrderStates.PRINT_FORMAT


async def handle_print_format_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –æ–±—ã—á–Ω–æ–π –ø–µ—á–∞—Ç–∏ (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)."""
    text = update.message.text.strip()
    
    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)
    
    if text == "A4 (210√ó297 –º–º)":
        context.user_data["format"] = "A4"
        context.user_data["sheet_format"] = "A4"
    elif text == "A3 (297√ó420 –º–º)":
        context.user_data["format"] = "A3"
        context.user_data["sheet_format"] = "A3"
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return OrderStates.PRINT_FORMAT

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–µ—á–∞—Ç–∏:",
        reply_markup=get_print_type_keyboard()
    )
    return OrderStates.PRINT_TYPE


async def handle_print_type_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–µ—á–∞—Ç–∏ (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)."""
    text = update.message.text.strip().lower()
    
    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)
    
    if "—á—ë—Ä" in text or "—á–µ—Ä–Ω" in text:
        context.user_data["print_color"] = "bw"
    elif "—Ü–≤–µ—Ç" in text:
        context.user_data["print_color"] = "color"
    else:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–∏–ø –ø–µ—á–∞—Ç–∏.")
        return OrderStates.PRINT_TYPE

    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:",
        reply_markup=get_postpress_options_keyboard()
    )
    return OrderStates.POSTPRESS


async def handle_postpress_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏."""
    text = update.message.text.strip()
    
    if text in (BTN_BACK, BTN_CANCEL):
        return await handle_back(update, context)
    
    if text == "‚ú® –õ–∞–º–∏–Ω–∞—Ü–∏—è (–º–∞—Ç)":
        context.user_data["lamination"] = "matte"
    elif text == "‚ú® –õ–∞–º–∏–Ω–∞—Ü–∏—è (–≥–ª—è–Ω–µ—Ü)":
        context.user_data["lamination"] = "glossy"
    elif text == "‚ûñ –ë–∏–≥–æ–≤–∫–∞":
        context.user_data["bigovka_count"] = 1
    elif text == "üîò –°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤":
        context.user_data["corner_rounding"] = True
    elif text == "–ù–µ—Ç":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        context.user_data["lamination"] = "none"
        context.user_data["bigovka_count"] = 0
        context.user_data["corner_rounding"] = False
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞
    push_state(context, OrderStates.POSTPRESS)
    set_cur(context, OrderStates.ORDER_UPLOAD)
    await update.message.reply_text(
        f"–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª –¥–ª—è –ø–µ—á–∞—Ç–∏ (PDF –¥–æ {config.MAX_UPLOAD_MB} –ú–ë).",
        reply_markup=get_upload_keyboard()
    )
    return OrderStates.ORDER_UPLOAD


# –£–º–Ω–∞—è –æ—Ç–º–µ–Ω–∞

async def handle_smart_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ —à–∞–≥–∞ –∏–ª–∏ –≤—Å–µ–≥–æ –∑–∞–∫–∞–∑–∞."""
    await update.message.reply_text(
        "‚ùì –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∏–ª–∏ –≤–µ—Å—å –∑–∞–∫–∞–∑?",
        reply_markup=get_smart_cancel_keyboard()
    )
    context.user_data["cancel_query"] = True
    return OrderStates.CANCEL_CHOICE


async def handle_cancel_choice_new(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç–º–µ–Ω—ã (–Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)."""
    text = update.message.text.strip()
    
    if text == "‚Ü©Ô∏è –¢–æ–ª—å–∫–æ —à–∞–≥":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
        prev = pop_state(context)
        if prev == ConversationHandler.END:
            cur = get_cur(context)
            target = PREV_OF.get(cur)
            if not target:
                context.user_data.clear()
                await update.message.reply_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É",
                    reply_markup=get_home_keyboard()
                )
                return ConversationHandler.END
            set_cur(context, target)
        else:
            set_cur(context, prev)
        
        # –†–µ–Ω–¥–µ—Ä–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await render_state(update, context)
        return get_cur(context)
        
    elif text == "üóë –í–µ—Å—å –∑–∞–∫–∞–∑":
        # –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
        context.user_data.clear()
        await update.message.reply_text(
            "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω",
            reply_markup=get_home_keyboard()
        )
        return ConversationHandler.END
    
    else:
        await update.message.reply_text(REMIND_USE_BTNS)
        return OrderStates.CANCEL_CHOICE