# handlers/order_flow.py
import logging
import re
from telegram import Update, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, Message
from telegram.ext import ContextTypes, ConversationHandler
from states import OrderStates

# --- safe reply + anti-duplicate ---------------------------------
from telegram import Message

def eff_msg(update) -> Message:
    return update.effective_message

def _screen_fingerprint(state, text):
    return f"{state}|{(text or '').strip()}"

async def say(update, text, *, reply_markup=None, parse_mode=None, state_for_dedupe=None, context=None):
    """
    –ï–¥–∏–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:
    - –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –∏ –Ω–µ —É–¥–∞–ª—è–µ—Ç;
    - –≥–∞—Å–∏—Ç —Ç–æ—á–Ω—ã–µ –¥—É–±–ª–∏ –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ —ç–∫—Ä–∞–Ω–∞ (state+text).
    """
    try:
        if context is not None and state_for_dedupe is not None:
            fp = _screen_fingerprint(state_for_dedupe, text)
            last = context.user_data.get("last_screen_fp")
            if last == fp:
                # —Ç–æ—Ç –∂–µ —ç–∫—Ä–∞–Ω —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
                return None
            context.user_data["last_screen_fp"] = fp

        return await eff_msg(update).reply_text(text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception:
        return await eff_msg(update).reply_text("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

# ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–≤–æ–¥ —à–∞–≥–∞ –±–µ–∑ –¥—É–±–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
async def render(update, context, text, reply_markup=None, parse_mode=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —à–∞–≥–∞, —É–¥–∞–ª—è—è –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –¥–≤–∞–∂–¥—ã '–§–æ—Ä–º–∞—Ç –≤–∏–∑–∏—Ç–æ–∫').
    """
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    # last_id = context.user_data.pop("last_step_msg_id", None)
    # if last_id:
    #     try:
    #         await context.bot.delete_message(
    #             chat_id=update.effective_chat.id,
    #             message_id=last_id
    #         )
    #     except Exception:
    #         pass

    msg = await say(update, text, reply_markup=reply_markup, parse_mode=parse_mode)
    context.user_data["last_step_msg_id"] = msg.message_id
    return msg

# --- stack helpers –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å ---
def _stack(ctx): return ctx.user_data.setdefault("state_stack", [])
def push_state(ctx, st):
    s = _stack(ctx)
    if not s or s[-1] != st:
        s.append(st)
def pop_state(ctx):
    s = _stack(ctx)
    return s.pop() if s else None
def top_state(ctx):
    s = _stack(ctx)
    return s[-1] if s else None

async def goto(update, context, state, renderer):
    # –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –Ω–æ–≤—ã–º —ç–∫—Ä–∞–Ω–æ–º —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω—Ç–∏-–¥–µ–¥—É–ø,
    # —á—Ç–æ–±—ã –Ω–æ–≤—ã–π —à–∞–≥ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤–∞–ª—Å—è
    context.user_data.pop("last_screen_fp", None)
    push_state(context, state)
    await renderer(update, context)  # renderer –≤–Ω—É—Ç—Ä–∏ –≤—ã–∑–æ–≤–µ—Ç say(..., state_for_dedupe=state, context=context)
    return state

# ‚úÖ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤
def _get_ext(filename: str) -> str:
    return (filename or "").rsplit(".", 1)[-1].lower() if "." in (filename or "") else ""

ALLOWED_COMMON_EXTS = {"pdf", "jpg", "jpeg", "png"}

# --- –†–ï–ù–î–ï–†–ï–† –®–ê–ì–û–í ---

# –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∏–∂–µ –¥–æ–ª–∂–Ω–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω—É–∂–Ω—É—é reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É,
# –∏ –ù–ò–ß–ï–ì–û –Ω–µ –º–µ–Ω—è—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.
# –ï—Å–ª–∏ —É —Ç–µ–±—è —Ç–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–æ—Å—Ç–æ —É–∫–∞–∂–∏ –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä–µ.

async def render_choose_category(update, context):
    from keyboards import get_categories_keyboard
    await say(
        update,
        "–ß—Ç–æ –±—É–¥–µ–º –ø–µ—á–∞—Ç–∞—Ç—å?",
        reply_markup=get_categories_keyboard(),
        state_for_dedupe=OrderStates.CHOOSE_CATEGORY,
        context=context,
    )

# -------- –í–ò–ó–ò–¢–ö–ò --------
async def render_bc_qty(update, context):
    from keyboards import nav_keyboard
    await say(
        update,
        "üìä –£–∫–∞–∂–∏—Ç–µ —Ç–∏—Ä–∞–∂ –≤–∏–∑–∏—Ç–æ–∫ (–∫—Ä–∞—Ç–Ω–æ 50, –º–∏–Ω–∏–º—É–º 50). –ü–æ–¥—Å–∫–∞–∑–∫–∏: 50, 100, 150, 200, 500, 1000.",
        reply_markup=nav_keyboard(),
        state_for_dedupe=OrderStates.BC_QTY,
        context=context,
    )

async def render_bc_format(update, context):
    from keyboards import get_bc_format_keyboard
    await say(
        update,
        "üìê –§–æ—Ä–º–∞—Ç –≤–∏–∑–∏—Ç–æ–∫:",
        reply_markup=get_bc_format_keyboard(),
        state_for_dedupe=OrderStates.BC_FORMAT,
        context=context,
    )

async def render_bc_sides(update, context):
    from keyboards import get_bc_sides_keyboard
    await say(
        update,
        "üñ®Ô∏è –°—Ç–æ—Ä–æ–Ω—ã –ø–µ—á–∞—Ç–∏ –≤–∏–∑–∏—Ç–æ–∫:",
        reply_markup=get_bc_sides_keyboard(),
        state_for_dedupe=OrderStates.BC_SIDES,
        context=context,
    )

async def render_bc_lamination(update, context):
    from keyboards import get_bc_lamination_keyboard
    await say(
        update,
        "‚ú® –õ–∞–º–∏–Ω–∞—Ü–∏—è –≤–∏–∑–∏—Ç–æ–∫:",
        reply_markup=get_bc_lamination_keyboard(),
        state_for_dedupe=OrderStates.BC_LAMINATION,
        context=context,
    )

async def ask_bc_files(update, context):
    from keyboards import get_files_keyboard
    return await render(update, context, "üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞–∫–µ—Ç (—Ç–æ–ª—å–∫–æ PDF). –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª.", reply_markup=get_files_keyboard())

async def render_common_files(update, context):
    from keyboards import get_files_keyboard
    category = context.user_data.get("category", "")
    if category == "business_card":
        text = "üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞–∫–µ—Ç (—Ç–æ–ª—å–∫–æ PDF). –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª."
    else:
        text = "üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞–∫–µ—Ç (PDF/JPG/PNG). –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª."
    
    await say(
        update,
        text,
        reply_markup=get_files_keyboard(),
        state_for_dedupe=OrderStates.ORDER_FILES,
        context=context,
    )

# -------- –û–§–ò–°–ù–ê–Ø –ü–ï–ß–ê–¢–¨ --------
async def render_office_copies(update, context):
    from keyboards import nav_keyboard
    await say(
        update,
        "üßæ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ (–º–æ–∂–Ω–æ —Ü–∏—Ñ—Ä–∞–º–∏ –∏–ª–∏ —Å–ª–æ–≤–∞–º–∏: \"3\", \"—Ç—Ä–∏\", \"–ø—è—Ç—å\").",
        reply_markup=nav_keyboard(),
        state_for_dedupe=OrderStates.QUANTITY,
        context=context,
    )

async def render_office_format(update, context):
    from keyboards import get_office_format_keyboard
    await say(
        update,
        "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç: A4 –∏–ª–∏ A3",
        reply_markup=get_office_format_keyboard(),
        state_for_dedupe=OrderStates.OFFICE_FORMAT,
        context=context,
    )

async def render_office_color(update, context):
    from keyboards import get_office_color_keyboard
    await say(
        update,
        "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏:",
        reply_markup=get_office_color_keyboard(),
        state_for_dedupe=OrderStates.OFFICE_COLOR,
        context=context,
    )

async def render_common_files_office(update, context):
    from keyboards import get_files_keyboard
    await say(
        update,
        "üìé –ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–∞–∫–µ—Ç (PDF/JPG/PNG). –ó–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª.",
        reply_markup=get_files_keyboard(),
        state_for_dedupe=OrderStates.ORDER_FILES,
        context=context,
    )

# -------- –ü–õ–ê–ö–ê–¢–´ --------
async def render_poster_format(update, context):
    from keyboards import get_poster_format_keyboard
    await say(
        update,
        "üìê –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞–∫–∞—Ç–∞:",
        reply_markup=get_poster_format_keyboard(),
        state_for_dedupe=OrderStates.POSTER_FORMAT,
        context=context,
    )

async def render_poster_lamination(update, context):
    from keyboards import get_simple_lamination_keyboard
    await say(
        update,
        "‚ú® –õ–∞–º–∏–Ω–∞—Ü–∏—è –ø–ª–∞–∫–∞—Ç–∞:",
        reply_markup=get_simple_lamination_keyboard(),
        state_for_dedupe=OrderStates.ORDER_POSTPRESS,
        context=context,
    )

# -------- –§–õ–ê–ï–†–´ --------
async def render_flyer_quantity(update, context):
    from keyboards import nav_keyboard
    await say(
        update,
        "üìä –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–ª–∞–µ—Ä–æ–≤:",
        reply_markup=nav_keyboard(),
        state_for_dedupe=OrderStates.QUANTITY,
        context=context,
    )

async def render_flyer_format(update, context):
    from keyboards import get_fly_format_keyboard
    await say(
        update,
        "üìê –§–æ—Ä–º–∞—Ç —Ñ–ª–∞–µ—Ä–æ–≤:",
        reply_markup=get_fly_format_keyboard(),
        state_for_dedupe=OrderStates.FLY_FORMAT,
        context=context,
    )

async def render_flyer_sides(update, context):
    from keyboards import get_fly_sides_keyboard
    await say(
        update,
        "üñ®Ô∏è –°—Ç–æ—Ä–æ–Ω—ã –ø–µ—á–∞—Ç–∏ —Ñ–ª–∞–µ—Ä–æ–≤:",
        reply_markup=get_fly_sides_keyboard(),
        state_for_dedupe=OrderStates.FLY_SIDES,
        context=context,
    )

# -------- –ù–ê–ö–õ–ï–ô–ö–ò --------
async def render_sticker_quantity(update, context):
    from keyboards import nav_keyboard
    await say(
        update,
        "üìä –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∫–ª–µ–µ–∫:",
        reply_markup=nav_keyboard(),
        state_for_dedupe=OrderStates.QUANTITY,
        context=context,
    )

async def render_sticker_size(update, context):
    from keyboards import get_files_keyboard
    await say(
        update,
        "üìè –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –Ω–∞–∫–ª–µ–µ–∫:",
        reply_markup=get_files_keyboard(),
        state_for_dedupe=OrderStates.STICKER_SIZE,
        context=context,
    )

async def render_sticker_material(update, context):
    from keyboards import get_sticker_material_keyboard
    await say(
        update,
        "üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞–∫–ª–µ–µ–∫:",
        reply_markup=get_sticker_material_keyboard(),
        state_for_dedupe=OrderStates.STICKER_MATERIAL,
        context=context,
    )

async def render_sticker_color(update, context):
    from keyboards import get_sticker_color_keyboard
    await say(
        update,
        "üé® –¶–≤–µ—Ç–Ω–æ—Å—Ç—å –Ω–∞–∫–ª–µ–µ–∫:",
        reply_markup=get_sticker_color_keyboard(),
        state_for_dedupe=OrderStates.STICKER_COLOR,
        context=context,
    )

# -------- –û–ë–©–ò–ï –®–ê–ì–ò --------
async def render_phone(update, context):
    from keyboards import get_phone_keyboard
    await say(
        update,
        "üìû –£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏:",
        reply_markup=get_phone_keyboard(),
        state_for_dedupe=OrderStates.PHONE,
        context=context,
    )

async def render_notes(update, context):
    from keyboards import get_notes_keyboard
    await say(
        update,
        "üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
        reply_markup=get_notes_keyboard(),
        state_for_dedupe=OrderStates.NOTES,
        context=context,
    )

async def render_due(update, context):
    from keyboards import get_due_keyboard
    await say(
        update,
        "üìÖ –£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞, 05.10.2025 14:00) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=get_due_keyboard(),
        state_for_dedupe=OrderStates.ORDER_DUE,
        context=context,
    )

async def render_confirm(update, context):
    from keyboards import get_confirm_keyboard
    summary = format_order_summary(context.user_data)
    await say(
        update,
        f"{texts.CONFIRM_PROMPT}\n\n{summary}",
        reply_markup=get_confirm_keyboard(),
        state_for_dedupe=OrderStates.CONFIRM,
        context=context,
    )


async def render_state(update, context, state):
    """–û—Ç—Ä–∏—Å–æ–≤–∞—Ç—å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —à–∞–≥ —Å –µ–≥–æ —Ä–æ–¥–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö)."""
    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –∏–∑ callback ‚Äî –ø–æ–≥–∞—Å–∏–º ¬´—á–∞—Å–∏–∫–∏¬ª –∏ –æ—á–∏—Å—Ç–∏–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if getattr(update, "callback_query", None):
        try:
            await update.callback_query.answer()
        except Exception:
            pass
    fn = STATE_RENDERERS.get(state)
    if fn is None:
        # –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç ‚Äî –≤–µ—Ä–Ω—ë–º—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        await render_choose_category(update, context)
        return OrderStates.CHOOSE_CATEGORY
    await fn(update, context)
    return state

from keyboards import (
    get_category_keyboard,
    get_categories_keyboard,
    get_office_format_keyboard,
    get_office_color_keyboard,
    get_poster_format_keyboard,
    get_simple_lamination_keyboard,
    get_bc_format_keyboard,
    get_bc_sides_keyboard,
    get_bc_lamination_keyboard,
    get_fly_format_keyboard,
    get_fly_sides_keyboard,
    get_sticker_material_keyboard,
    get_sticker_color_keyboard,
    get_files_keyboard,
    get_due_keyboard,
    get_phone_keyboard,
    get_notes_keyboard,
    get_confirm_keyboard,
    get_main_menu_keyboard,
    get_cancel_choice_keyboard,
    nav_keyboard,
    BTN_NEXT,
    BTN_CANCEL,
    BTN_CANCEL_ORDER,
    BTN_SKIP,
    CAT_BC,
    CAT_POSTERS,
    CAT_FLYERS,
    CAT_STICKERS,
    CAT_BANNERS,
    CAT_OFFICE,
    BTN_CUSTOM,
)
from handlers.common import main_menu_keyboard
from services.notifier import send_order_to_operators
from services.validators import parse_due, validate_phone, normalize_phone, validate_bc_quantity, validate_quantity, parse_exemplars
from services.formatting import format_order_summary
from services.orders import create_order
import config
import texts

logger = logging.getLogger(__name__)

CANCEL_RE = r"^(?:‚ùå –û—Ç–º–µ–Ω–∞|–û—Ç–º–µ–Ω–∞|/cancel)$"
BACK_RE   = r"^(?:‚Ü©Ô∏è –ù–∞–∑–∞–¥|–ù–∞–∑–∞–¥|/back)$"
SKIP_RE   = r"^(?:‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å|–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)$"

# –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤
ASK_OFFICE_FORMAT = "üìÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –æ—Ñ–∏—Å–Ω–æ–π –±—É–º–∞–≥–∏:"
ASK_OFFICE_COLOR = "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç–Ω–æ—Å—Ç—å –ø–µ—á–∞—Ç–∏:"
ASK_POSTER_FORMAT = "üìê –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞–∫–∞—Ç–∞:"
ASK_POSTER_POSTPRESS = "‚ú® –õ–∞–º–∏–Ω–∞—Ü–∏—è –ø–ª–∞–∫–∞—Ç–∞:"


# ==================== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================


# ==================== –ù–ê–ß–ê–õ–û –ó–ê–ö–ê–ó–ê ====================

async def start_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    context.user_data.clear()                 # –ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
    context.user_data["state_stack"] = []     # –Ω–æ–≤—ã–π —Å—Ç–µ–∫
    return await goto(update, context, OrderStates.CHOOSE_CATEGORY, render_choose_category)


# ==================== –í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò ====================

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–µ—á–∞—Ç–∏"""
    from handlers.common import start_command
    text = (update.message.text or "").strip()
    # –î—É–±–ª–∏—Ä—É—é—â–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –≤–¥—Ä—É–≥ —ç—Ç–æ "–ù–∞–∑–∞–¥" ‚Äî —É–≤–æ–¥–∏–º –≤ /start
    if text.lower().endswith("–Ω–∞–∑–∞–¥"):
        return await start_command(update, context)
    
    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑
    if text == BTN_CUSTOM:
        from keyboards import add_contact_row, InlineKeyboardMarkup
        from texts import CONTACTS_TEXT
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        rows = []
        rows = add_contact_row(rows)
        keyboard = InlineKeyboardMarkup(rows)
        
        await say(
            update,
            (
                "üõ†Ô∏è *–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑*\n\n"
                "–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ ‚Äî –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –º–∞—Ç–µ—Ä–∏–∞–ª –∏–ª–∏ "
                "–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω? –ú—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ üôå\n\n"
                f"{CONTACTS_TEXT}\n\n"
                "–û–Ω —É—Ç–æ—á–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏ –∏ –ø–æ–º–æ–∂–µ—Ç –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑."
            ),
            reply_markup=keyboard,
            parse_mode="Markdown",
        )
        return ConversationHandler.END
    
    # –í–∏–∑–∏—Ç–∫–∏
    elif text == CAT_BC:
        context.user_data["what_to_print"] = "–í–∏–∑–∏—Ç–∫–∏"
        context.user_data["category"] = "business_card"
        return await goto(update, context, OrderStates.BC_QTY, render_bc_qty)
    
    # –ü–ª–∞–∫–∞—Ç—ã
    elif text == CAT_POSTERS:
        context.user_data["what_to_print"] = "–ü–ª–∞–∫–∞—Ç—ã"
        context.user_data["category"] = "poster"
        return await goto(update, context, OrderStates.POSTER_FORMAT, render_poster_format)
    
    # –§–ª–∞–µ—Ä—ã
    elif text == CAT_FLYERS:
        context.user_data["what_to_print"] = "–§–ª–∞–µ—Ä—ã"
        context.user_data["category"] = "flyer"
        return await goto(update, context, OrderStates.QUANTITY, render_flyer_quantity)
    
    # –ù–∞–∫–ª–µ–π–∫–∏
    elif text == CAT_STICKERS:
        context.user_data["what_to_print"] = "–ù–∞–∫–ª–µ–π–∫–∏"
        context.user_data["category"] = "sticker"
        return await goto(update, context, OrderStates.QUANTITY, render_sticker_quantity)
    
    # –ë–∞–Ω–Ω–µ—Ä—ã - —Ä–µ–¥–∏—Ä–µ–∫—Ç –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É
    elif text == CAT_BANNERS:
        from keyboards import add_contact_row, InlineKeyboardMarkup
        from texts import CONTACTS_TEXT
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        rows = []
        rows = add_contact_row(rows)
        keyboard = InlineKeyboardMarkup(rows)
        
        # –∏–Ω—Ñ–æ-–∫–∞—Ä—Ç–æ—á–∫–∞ ‚Üí –Ω–∞–∑–∞–¥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await say(update,
            "üñºÔ∏è –ë–∞–Ω–Ω–µ—Ä—ã —Å–µ–π—á–∞—Å –æ—Ñ–æ—Ä–º–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.\n"
            "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, ‚Äî –º—ã –±—ã—Å—Ç—Ä–æ –≤—Å—ë —É—Ç–æ—á–Ω–∏–º –∏ –æ—Ñ–æ—Ä–º–∏–º.\n\n"
            f"{CONTACTS_TEXT}",
            reply_markup=keyboard,
            state_for_dedupe=OrderStates.CHOOSE_CATEGORY, context=context
        )
        return await goto(update, context, OrderStates.CHOOSE_CATEGORY, render_choose_category)
    
    # –û—Ñ–∏—Å–Ω–∞—è –±—É–º–∞–≥–∞
    elif text == CAT_OFFICE:
        context.user_data["what_to_print"] = "–ü–µ—á–∞—Ç—å –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–π –±—É–º–∞–≥–µ"
        context.user_data["category"] = "office"
        return await goto(update, context, OrderStates.QUANTITY, render_office_copies)
    
    # –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–Ω–æ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    return await goto(update, context, OrderStates.CHOOSE_CATEGORY, render_choose_category)


# ==================== –ö–û–õ–ò–ß–ï–°–¢–í–û ====================

def _parse_int_positive(txt):
    try:
        n=int(str(txt).strip())
        return n if n>0 else None
    except: return None

async def handle_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    text = (update.message.text or "").strip()
    
    qty = _parse_int_positive(text)
    if not qty:
        await say(update, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.", state_for_dedupe=OrderStates.QUANTITY, context=context)
        return await goto(update, context, OrderStates.QUANTITY, render_office_copies)
    
    context.user_data["quantity"] = qty
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category = context.user_data.get("category", "")
    
    if category == "flyer":
        return await goto(update, context, OrderStates.FLY_FORMAT, render_flyer_format)
    
    elif category == "sticker":
        return await goto(update, context, OrderStates.STICKER_SIZE, render_sticker_size)
    
    elif category == "office":
        # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        text = (update.message.text or "").strip()
        qty = parse_exemplars(text)
        if not qty:
            await say(update, "‚ùå –ù–µ –ø–æ–Ω—è–ª –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3) –∏–ª–∏ —Å–ª–æ–≤–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´—Ç—Ä–∏¬ª).", state_for_dedupe=OrderStates.QUANTITY, context=context)
            return await goto(update, context, OrderStates.QUANTITY, render_office_copies)
        context.user_data["quantity"] = qty
        
        return await goto(update, context, OrderStates.OFFICE_FORMAT, render_office_format)
    
    else:
        return await render_state(update, context, OrderStates.ORDER_FILES)


async def handle_bc_qty(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏—Ä–∞–∂–∞ –≤–∏–∑–∏—Ç–æ–∫ (–∫—Ä–∞—Ç–Ω–æ 50)"""
    text = (update.message.text or "").strip()
    
    try:
        qty = int(text)
        if not validate_bc_quantity(qty):
            await say(update, texts.ERR_BC_STEP, state_for_dedupe=OrderStates.BC_QTY, context=context)
            return await goto(update, context, OrderStates.BC_QTY, render_bc_qty)
        
        context.user_data["quantity"] = qty
        return await goto(update, context, OrderStates.BC_FORMAT, render_bc_format)
    
    except ValueError:
        await say(update, texts.ERR_INT, state_for_dedupe=OrderStates.BC_QTY, context=context)
        return await goto(update, context, OrderStates.BC_QTY, render_bc_qty)


# ==================== –û–§–ò–°–ù–ê–Ø –ë–£–ú–ê–ì–ê ====================

async def handle_office_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ñ–∏—Å–Ω–æ–π –±—É–º–∞–≥–∏"""
    text = (update.message.text or "").strip().upper()
    if text not in {"A4", "A3"}:
        await say(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç: A4 –∏–ª–∏ A3.", reply_markup=get_office_format_keyboard(), state_for_dedupe=OrderStates.OFFICE_FORMAT, context=context)
        return await goto(update, context, OrderStates.OFFICE_FORMAT, render_office_format)

    context.user_data["format"] = text
    context.user_data["sheet_format"] = text
    return await goto(update, context, OrderStates.OFFICE_COLOR, render_office_color)


async def handle_office_color(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–Ω–æ—Å—Ç–∏ –æ—Ñ–∏—Å–Ω–æ–π –±—É–º–∞–≥–∏"""
    text = (update.message.text or "").strip().lower()
    if text not in {"—á/–±", "‚ö´ —á/–±", "—Ü–≤–µ—Ç–Ω–∞—è", "üåà —Ü–≤–µ—Ç–Ω–∞—è"}:
        await say(update, "–í—ã–±–µ—Ä–∏—Ç–µ: ‚ö´ –ß/–ë –∏–ª–∏ üåà –¶–≤–µ—Ç–Ω–∞—è.", reply_markup=get_office_color_keyboard(), state_for_dedupe=OrderStates.OFFICE_COLOR, context=context)
        return await goto(update, context, OrderStates.OFFICE_COLOR, render_office_color)

    color = "bw" if "—á/–±" in text else "color"
    context.user_data["print_color"] = color
    context.user_data["lamination"] = "none"
    context.user_data["quantity"] = context.user_data.get("quantity", 1)
    
    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É PDF
    return await render_state(update, context, OrderStates.ORDER_FILES)


# ==================== –ü–õ–ê–ö–ê–¢–´ ====================

async def handle_poster_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ø–ª–∞–∫–∞—Ç–∞"""
    text = (update.message.text or "").strip().upper()
    if text not in {"A2", "A1", "A0"}:
        await say(update, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç: A2, A1 –∏–ª–∏ A0.", reply_markup=get_poster_format_keyboard(), state_for_dedupe=OrderStates.POSTER_FORMAT, context=context)
        return await goto(update, context, OrderStates.POSTER_FORMAT, render_poster_format)

    context.user_data["format"] = text
    context.user_data["sheet_format"] = text
    context.user_data["quantity"] = context.user_data.get("quantity", 1)
    
    return await goto(update, context, OrderStates.ORDER_POSTPRESS, render_poster_lamination)


async def handle_poster_lamination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–º–∏–Ω–∞—Ü–∏–∏ –ø–ª–∞–∫–∞—Ç–∞"""
    text = (update.message.text or "").strip().lower()
    if text not in {"–ª–∞–º–∏–Ω–∞—Ü–∏—è: –¥–∞", "–ª–∞–º–∏–Ω–∞—Ü–∏—è: –Ω–µ—Ç", "–¥–∞", "–Ω–µ—Ç"}:
        await say(update, "–í—ã–±–µ—Ä–∏—Ç–µ: –õ–∞–º–∏–Ω–∞—Ü–∏—è: –î–∞ / –õ–∞–º–∏–Ω–∞—Ü–∏—è: –ù–µ—Ç", reply_markup=get_simple_lamination_keyboard(), state_for_dedupe=OrderStates.ORDER_POSTPRESS, context=context)
        return await goto(update, context, OrderStates.ORDER_POSTPRESS, render_poster_lamination)

    lamination = "glossy" if "–¥–∞" in text else "none"
    context.user_data["lamination"] = lamination
    context.user_data["print_color"] = "color"
    
    return await render_state(update, context, OrderStates.ORDER_FILES)


# ==================== –í–ò–ó–ò–¢–ö–ò ====================

async def handle_bc_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –≤–∏–∑–∏—Ç–æ–∫"""
    text = (update.message.text or "").strip()
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —Ç.–∫. —Ñ–æ—Ä–º–∞—Ç –æ–¥–∏–Ω
    context.user_data["format"] = "90√ó50 –º–º"
    context.user_data["sheet_format"] = "90x50"
    
    return await goto(update, context, OrderStates.BC_SIDES, render_bc_sides)


async def handle_bc_sides(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–æ—Å—Ç–∏ –≤–∏–∑–∏—Ç–æ–∫"""
    text = (update.message.text or "").strip().lower()
    
    if "–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω" in text:
        sides = "2"
    elif "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω" in text:
        sides = "1"
    else:
        await say(update, "–í—ã–±–µ—Ä–∏—Ç–µ: –û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∏–ª–∏ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ", reply_markup=get_bc_sides_keyboard(), state_for_dedupe=OrderStates.BC_SIDES, context=context)
        return await goto(update, context, OrderStates.BC_SIDES, render_bc_sides)
    
    context.user_data["sides"] = sides
    return await goto(update, context, OrderStates.BC_LAMINATION, render_bc_lamination)


async def handle_bc_lamination(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–º–∏–Ω–∞—Ü–∏–∏ –≤–∏–∑–∏—Ç–æ–∫"""
    text = (update.message.text or "").strip().lower()
    
    if "–º–∞—Ç–æ–≤" in text:
        lamination = "matte"
    elif "–≥–ª—è–Ω–µ—Ü" in text or "–≥–ª—è–Ω—Ü" in text:
        lamination = "glossy"
    elif "–Ω–µ—Ç" in text or "‚ùå" in text:
        lamination = "none"
    else:
        await say(update, "–í—ã–±–µ—Ä–∏—Ç–µ: ‚ú® –ú–∞—Ç–æ–≤–∞—è, ‚ú® –ì–ª—è–Ω–µ—Ü –∏–ª–∏ ‚ùå –ù–µ—Ç", reply_markup=get_bc_lamination_keyboard(), state_for_dedupe=OrderStates.BC_LAMINATION, context=context)
        return await goto(update, context, OrderStates.BC_LAMINATION, render_bc_lamination)
    
    context.user_data["lamination"] = lamination
    context.user_data["print_color"] = "color"
    context.user_data["bigovka_count"] = 0  # –ë–µ–∑ –±–∏–≥–æ–≤–∫–∏
    
    return await render_state(update, context, OrderStates.ORDER_FILES)


# ==================== –§–õ–ê–ï–†–´ ====================

async def handle_fly_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–ª–∞–µ—Ä–∞"""
    text = (update.message.text or "").strip().upper()
    
    if text not in {"A7", "A6", "A5", "A4"}:
        await say(update, "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç: A7, A6, A5 –∏–ª–∏ A4", reply_markup=get_fly_format_keyboard(), state_for_dedupe=OrderStates.FLY_FORMAT, context=context)
        return await goto(update, context, OrderStates.FLY_FORMAT, render_flyer_format)
    
    context.user_data["format"] = text
    context.user_data["sheet_format"] = text
    
    return await goto(update, context, OrderStates.FLY_SIDES, render_flyer_sides)


async def handle_fly_sides(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ—Ä–æ–Ω–Ω–æ—Å—Ç–∏ —Ñ–ª–∞–µ—Ä–∞"""
    text = (update.message.text or "").strip().lower()
    
    if "–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω" in text:
        sides = "2"
    elif "–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω" in text:
        sides = "1"
    else:
        await say(update, "–í—ã–±–µ—Ä–∏—Ç–µ: –û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –∏–ª–∏ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ", reply_markup=get_fly_sides_keyboard(), state_for_dedupe=OrderStates.FLY_SIDES, context=context)
        return await goto(update, context, OrderStates.FLY_SIDES, render_flyer_sides)
    
    context.user_data["sides"] = sides
    context.user_data["lamination"] = "none"
    context.user_data["print_color"] = "color"
    
    return await render_state(update, context, OrderStates.ORDER_FILES)


# ==================== –ù–ê–ö–õ–ï–ô–ö–ò ====================

async def handle_sticker_size(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞–∫–ª–µ–µ–∫"""
    text = (update.message.text or "").strip()
    
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Ç–µ–∫—Å—Ç –∫–∞–∫ —Ä–∞–∑–º–µ—Ä
    context.user_data["format"] = text
    context.user_data["custom_size_mm"] = text
    
    return await goto(update, context, OrderStates.STICKER_MATERIAL, render_sticker_material)


async def handle_sticker_material(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –Ω–∞–∫–ª–µ–µ–∫"""
    text = (update.message.text or "").strip().lower()
    
    if "–±—É–º–∞–≥–∞" in text:
        material = "paper"
    elif "–ø–ª–µ–Ω–∫" in text or "–≤–∏–Ω–∏–ª" in text:
        material = "vinyl"
    else:
        await say(update, "–í—ã–±–µ—Ä–∏—Ç–µ: –ë—É–º–∞–≥–∞ –∏–ª–∏ –ü–ª–µ–Ω–∫–∞", reply_markup=get_sticker_material_keyboard(), state_for_dedupe=OrderStates.STICKER_MATERIAL, context=context)
        return await goto(update, context, OrderStates.STICKER_MATERIAL, render_sticker_material)
    
    context.user_data["material"] = material
    
    return await goto(update, context, OrderStates.STICKER_COLOR, render_sticker_color)


async def handle_sticker_color(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–≤–µ—Ç–Ω–æ—Å—Ç–∏ –Ω–∞–∫–ª–µ–µ–∫"""
    text = (update.message.text or "").strip().lower()
    
    if "—á/–±" in text or "—á–µ—Ä–Ω–æ-–±–µ–ª" in text:
        color = "bw"
    elif "—Ü–≤–µ—Ç" in text:
        color = "color"
    else:
        await say(update, "–í—ã–±–µ—Ä–∏—Ç–µ: ‚ö´ –ß/–ë –∏–ª–∏ üåà –¶–≤–µ—Ç–Ω–∞—è", reply_markup=get_sticker_color_keyboard(), state_for_dedupe=OrderStates.STICKER_COLOR, context=context)
        return await goto(update, context, OrderStates.STICKER_COLOR, render_sticker_color)
    
    context.user_data["print_color"] = color
    context.user_data["lamination"] = "none"
    
    return await render_state(update, context, OrderStates.ORDER_FILES)


# ==================== –ó–ê–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í ====================

# ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
async def handle_file(update, context):
    ud = context.user_data
    files = ud.setdefault("files", [])

    # –î–æ–∫—É–º–µ–Ω—Ç
    if update.message.document:
        doc = update.message.document
        ext = _get_ext(doc.file_name)
        files.append({"type": "document", "ext": ext})

    # –§–æ—Ç–æ
    elif update.message.photo:
        files.append({"type": "photo", "ext": "jpg"})

    await say(update, "‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω.", state_for_dedupe=OrderStates.ORDER_FILES, context=context)

async def handle_files(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–î–∞–ª–µ–µ"
    if (update.message and update.message.text == BTN_NEXT):
        product = context.user_data.get("category")  # 'business_card', 'poster', 'flyer', 'sticker', 'office'
        files = context.user_data.get("files", [])

        if not files:
            await say(update, "‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª (PDF/JPG/PNG).", state_for_dedupe=OrderStates.ORDER_FILES, context=context)
            return await goto(update, context, OrderStates.ORDER_FILES, render_common_files)

        if product == "business_card":  # –≤–∏–∑–∏—Ç–∫–∏ ‚Äî —Ç–æ–ª—å–∫–æ PDF
            if not all(f["ext"] == "pdf" for f in files):
                await say(update, "‚ùå –î–ª—è –≤–∏–∑–∏—Ç–æ–∫ –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF-—Ñ–∞–π–ª. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF –∏ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ ¬´‚û°Ô∏è –î–∞–ª–µ–µ¬ª.", state_for_dedupe=OrderStates.ORDER_FILES, context=context)
                return await goto(update, context, OrderStates.ORDER_FILES, render_common_files)
        else:
            for f in files:
                if f["ext"] not in ALLOWED_COMMON_EXTS:
                    await say(update, "‚ùå –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF, JPG –∏–ª–∏ PNG.", state_for_dedupe=OrderStates.ORDER_FILES, context=context)
                    return await goto(update, context, OrderStates.ORDER_FILES, render_common_files)

        # –í—Å—ë –æ–∫ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        return await goto(update, context, OrderStates.PHONE, render_phone)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    if update.message.document or update.message.photo:
        return await handle_file(update, context)
    


# ==================== –°–†–û–ö ====================

async def handle_due(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
    text = (update.message.text or "").strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if update.message.text == BTN_SKIP:
        context.user_data["deadline_at"] = None
        context.user_data.setdefault("notes", []).append(
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–∫–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ —Å—Ä–æ–∫–∞–º –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."
        )
        return await render_state(update, context, OrderStates.PHONE)
    
    if re.match(SKIP_RE, text, flags=re.I) or "–ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏" in text.lower():
        context.user_data["deadline_at"] = None
        context.user_data.setdefault("notes", []).append(
            "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞–∫–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Ä–∏–µ–Ω—Ç–∏—Ä—É–µ—Ç –ø–æ —Å—Ä–æ–∫–∞–º –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏."
        )
        return await render_state(update, context, OrderStates.PHONE)

    due = parse_due(text, tz="Europe/Moscow")  # –∏–ª–∏ –∏–∑ config
    if not due:
        await say(update, "‚ùå –ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å —Å—Ä–æ–∫. –ü—Ä–∏–º–µ—Ä—ã: –∑–∞–≤—Ç—Ä–∞, 05.10.2025 14:00.\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª.", state_for_dedupe=OrderStates.ORDER_DUE, context=context)
        return await goto(update, context, OrderStates.ORDER_DUE, render_due)

    context.user_data["deadline_at"] = due
    context.user_data["deadline_note"] = None
    return await render_state(update, context, OrderStates.PHONE)


# ==================== –¢–ï–õ–ï–§–û–ù ====================

async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    text = (update.message.text or "").strip()
    
    phone = normalize_phone(text)
    if not phone:
        await say(update, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ü—Ä–∏–º–µ—Ä: +7 999 123-45-67", state_for_dedupe=OrderStates.PHONE, context=context)
        return await goto(update, context, OrderStates.PHONE, render_phone)

    # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–∫–∞–∑ –∏ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    context.user_data["contact"] = phone
    return await goto(update, context, OrderStates.NOTES, render_notes)


# ==================== –ü–û–ñ–ï–õ–ê–ù–ò–Ø ====================

async def handle_notes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π"""
    text = (update.message.text or "").strip()
    
    # –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
    if "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" in text.lower() or "‚è≠Ô∏è" in text:
        context.user_data["notes"] = ""
    else:
        context.user_data["notes"] = text
    
    return await goto(update, context, OrderStates.CONFIRM, render_confirm)


# ==================== –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ====================

async def handle_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    text = (update.message.text or "").strip().lower()
    
    if "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" in text or "‚úÖ" in text:
        try:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î
            user = update.effective_user
            order = create_order(context.user_data, user.id)
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, –Ω–æ –Ω–µ —Ä–æ–Ω—è–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π, –µ—Å–ª–∏ —á–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
            try:
                results = await send_order_to_operators(
                    context.bot,
                    order,
                    user,
                    config.config.OPERATOR_CHAT_ID,
                    order.code
                )
                # –¥–ª—è –¥–µ–±–∞–≥–∞ –º–æ–∂–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ –ª–æ–≥–Ω—É—Ç—å —Å–≤–æ–¥–∫—É
                ok = sum(1 for _, s, _ in results if s)
                fail = sum(1 for _, s, _ in results if not s)
                logger.info(f"Operator notify summary: ok={ok} fail={fail}")
            except Exception as e:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π ‚Äî –∂–µ—Å—Ç–∫–∞—è –∏–∑–æ–ª—è—Ü–∏—è –æ—à–∏–±–æ–∫
                logger.exception(f"Operator notify crashed: {e}")
                # –Ω–µ —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ "—Ç–µ—Ö. –æ—à–∏–±–∫—É"
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            from keyboards import get_main_menu_keyboard
            await update.message.reply_text(
                texts.ORDER_ACCEPTED,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="Markdown"
            )
            
            context.user_data.clear()
            return ConversationHandler.END
            
        except Exception as e:
            logger.exception("Error creating order: %s", e)
            await update.message.reply_text(
                texts.TECH_ERROR,
                reply_markup=main_menu_keyboard()
            )
            context.user_data.clear()
            return ConversationHandler.END
    
    elif "–∏–∑–º–µ–Ω–∏—Ç—å" in text or "‚úèÔ∏è" in text:
        await update.message.reply_text(
            "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /neworder",
            reply_markup=main_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END
    
    else:
        await say(update, "–í—ã–±–µ—Ä–∏—Ç–µ: ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ ‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", reply_markup=get_confirm_keyboard(), state_for_dedupe=OrderStates.CONFIRM, context=context)
        return await goto(update, context, OrderStates.CONFIRM, render_confirm)


# ==================== –ù–ê–í–ò–ì–ê–¶–ò–Ø ====================

async def handle_back(update, context):
    pop_state(context)             # —É–±—Ä–∞—Ç—å —Ç–µ–∫—É—â–∏–π
    prev = top_state(context)      # –≤–∑—è—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π
    if prev is None:
        # –µ—Å–ª–∏ —Å—Ç–µ–∫–∞ –Ω–µ—Ç ‚Äî —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é
        from handlers.common import start_command
        context.user_data.pop("last_screen_fp", None)
        await start_command(update, context)
        return ConversationHandler.END

    context.user_data.pop("last_screen_fp", None)
    return await render_state(update, context, prev)


async def handle_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–º–Ω–∞—è –æ—Ç–º–µ–Ω–∞"""
    from keyboards import smart_cancel_inline
    return await say(update, "–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å?", reply_markup=smart_cancel_inline())

async def handle_cancel_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä –≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –æ—Ç–º–µ–Ω—ã"""
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "cancel_step":
        # –û—Ç–º–µ–Ω–∞ —à–∞–≥–∞ ‚Üí –ù–∞–∑–∞–¥
        return await handle_back(update, context)

    if data == "cancel_all":
        context.user_data.clear()
        await context.bot.send_message(
            update.effective_chat.id,
            "–û—Ç–º–µ–Ω–µ–Ω–æ."
        )
        from handlers.common import start_command
        return await start_command(update, context)


# === –°–ø–µ—Ü-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ===
def _top_state(ctx):
    stack = ctx.user_data.get("state_stack") or []
    return stack[-1] if stack else None

async def handle_back_from_categories(update, context):
    """
    –ù–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' –≤–µ–¥–µ—Ç –≤ /start.
    """
    if _top_state(context) != OrderStates.CHOOSE_CATEGORY:
        # –Ω–∞ –¥—Ä—É–≥–∏—Ö —à–∞–≥–∞—Ö –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        return _top_state(context) or OrderStates.CHOOSE_CATEGORY

    context.user_data.clear()
    from handlers.common import start_command
    await start_command(update, context)
    return ConversationHandler.END


# –°–õ–û–í–ê–†–¨ ¬´–°–û–°–¢–û–Ø–ù–ò–ï ‚Üí –§–£–ù–ö–¶–ò–Ø –û–¢–†–ò–°–û–í–ö–ò¬ª
STATE_RENDERERS = {
    OrderStates.CHOOSE_CATEGORY: render_choose_category,

    # –í–∏–∑–∏—Ç–∫–∏
    OrderStates.BC_QTY:           render_bc_qty,
    OrderStates.BC_FORMAT:        render_bc_format,
    OrderStates.BC_SIDES:         render_bc_sides,
    OrderStates.BC_LAMINATION:    render_bc_lamination,
    OrderStates.ORDER_FILES:      render_common_files,  # –æ–±—â–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    # –û—Ñ–∏—Å–Ω–∞—è –ø–µ—á–∞—Ç—å
    OrderStates.QUANTITY:         render_office_copies,  # –¥–ª—è –æ—Ñ–∏—Å–Ω–æ–π –ø–µ—á–∞—Ç–∏
    OrderStates.OFFICE_FORMAT:    render_office_format,
    OrderStates.OFFICE_COLOR:     render_office_color,

    # –ü–ª–∞–∫–∞—Ç—ã
    OrderStates.POSTER_FORMAT:    render_poster_format,
    OrderStates.ORDER_POSTPRESS:  render_poster_lamination,

    # –§–ª–∞–µ—Ä—ã
    OrderStates.FLY_FORMAT:       render_flyer_format,
    OrderStates.FLY_SIDES:        render_flyer_sides,

    # –ù–∞–∫–ª–µ–π–∫–∏
    OrderStates.STICKER_SIZE:     render_sticker_size,
    OrderStates.STICKER_MATERIAL: render_sticker_material,
    OrderStates.STICKER_COLOR:    render_sticker_color,

    # –û–±—â–∏–µ —à–∞–≥–∏
    OrderStates.ORDER_DUE:        render_due,
    OrderStates.PHONE:            render_phone,
    OrderStates.NOTES:            render_notes,
    OrderStates.CONFIRM:          render_confirm,
}

# –ó–∞—â–∏—Ç–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞–±—É–¥–µ—Ç –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å OrderStates
if 'OrderStates' not in globals():
    from states import OrderStates

# handlers/order_flow.py
from telegram.ext import ConversationHandler

async def reset_to_start(update, context):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ª—é–±–æ–π —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    try:
        context.user_data.clear()
    except Exception:
        pass
    # —Å–±—Ä–æ—Å –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–µ–∫–∞, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º
    try:
        context.user_data["state_stack"] = []
    except Exception:
        pass

    from handlers.common import start_command
    await start_command(update, context)
    return ConversationHandler.END


async def unknown_command_during_flow(update, context):
    """–ú—è–≥–∫–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è."""
    try:
        from keyboards import nav_keyboard
        await update.effective_message.reply_text(
            "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
            reply_markup=nav_keyboard() if 'nav_keyboard' in globals() else None
        )
    except Exception:
        await update.effective_message.reply_text("‚ö†Ô∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")

    # –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ —Ç–µ–∫—É—â–µ–º —à–∞–≥–µ, –µ—Å–ª–∏ –æ–Ω –∏–∑–≤–µ—Å—Ç–µ–Ω
    st = context.user_data.get("state_stack", [])
    try:
        from states import OrderStates
        return st[-1] if st else OrderStates.CHOOSE_CATEGORY
    except Exception:
        return ConversationHandler.END
