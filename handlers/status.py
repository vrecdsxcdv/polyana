import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from services.orders import update_order_status, get_order_by_code
from config import config

logger = logging.getLogger(__name__)

async def handle_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if not query.data:
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º callback_data
        parts = query.data.split('_')
        if len(parts) < 3:
            return
            
        action = parts[0]  # take, start_work, complete
        order_code = parts[-1]  # –∫–æ–¥ –∑–∞–∫–∞–∑–∞
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = query.from_user
        username = user.username or user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã
        order = get_order_by_code(order_code)
        if not order:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–µ–π—Å—Ç–≤–∏—è
        if action == "take":
            new_status = "TAKEN"
            status_text = f"üì¶ –ó–∞–∫–∞–∑ –≤–∑—è—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @{username}"
        elif action == "start":
            new_status = "IN_PROGRESS" 
            status_text = f"‚öôÔ∏è –û–ø–µ—Ä–∞—Ç–æ—Ä @{username} –ø—Ä–∏—Å—Ç—É–ø–∏–ª –∫ —Ä–∞–±–æ—Ç–µ"
        elif action == "complete":
            new_status = "COMPLETED"
            status_text = f"‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º @{username}"
        else:
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = update_order_status(order.id, new_status, username)
        if not success:
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        original_text = query.message.text
        updated_text = original_text + f"\n\n{status_text}"
        
        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
        if new_status == "COMPLETED":
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # await query.edit_message_text(updated_text)
            await context.bot.send_message(chat_id=query.message.chat_id, text=updated_text)
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            keyboard = []
            if new_status == "TAKEN":
                keyboard = [
                    [
                        InlineKeyboardButton("‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ", callback_data=f"start_work_{order_code}"),
                        InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"complete_order_{order_code}")
                    ]
                ]
            elif new_status == "IN_PROGRESS":
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data=f"complete_order_{order_code}")
                    ]
                ]
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # await query.edit_message_text(updated_text, reply_markup=reply_markup)
            await context.bot.send_message(chat_id=query.message.chat_id, text=updated_text, reply_markup=reply_markup)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        try:
            user_message = f"üì¢ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ {order_code} –∏–∑–º–µ–Ω–µ–Ω: {status_text}"
            await context.bot.send_message(chat_id=order.user_id, text=user_message)
        except Exception as e:
            logger.warning(f"Failed to notify user {order.user_id}: {e}")
            
    except Exception as e:
        logger.exception(f"Error handling status callback: {e}")
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        # await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
        await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")