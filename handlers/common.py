"""
–û–±—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
"""

import logging
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler

from keyboards import get_home_keyboard, orders_list_inline, BTN_MY_ORDERS
from texts import WELCOME, HELP_MESSAGE, ERROR_MESSAGES, CONTACTS_MESSAGE, YOUR_ORDERS_TITLE, NO_ORDERS, STATUS_TITLES
from services.notifier import notify_operator_called
from services.orders import get_user_orders, get_order_by_id
from database import get_db
from models import Order, User
from services.notifier import NotifierService

logger = logging.getLogger(__name__)

# –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –∞–ø–¥–µ–π—Ç–æ–≤
LAST_MSG_KEY = "__last_msg_id__"

def is_duplicate(update, context):
    msg = update.message or update.edited_message or update.callback_query
    if not msg:
        return False
    mid = getattr(msg, "message_id", None)
    if mid is None:
        return False
    key = f"{LAST_MSG_KEY}"
    if context.user_data.get(key) == mid:
        return True
    context.user_data[key] = mid
    return False


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    try:
        user = update.effective_user
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        from database import get_db
        from models import User
        
        db = get_db()
        try:
            existing_user = db.query(User).filter(User.tg_user_id == user.id).first()
            
            if not existing_user:
                new_user = User(
                    tg_user_id=user.id,
                    username=user.username,
                    first_name=user.first_name,
                    last_name=user.last_name
                )
                db.add(new_user)
                db.commit()
                logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user.id}")
            else:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                existing_user.username = user.username
                existing_user.first_name = user.first_name
                existing_user.last_name = user.last_name
                db.commit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            db.rollback()
        finally:
            db.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        try:
            await update.message.reply_text(
                WELCOME,
                reply_markup=get_home_keyboard(),
                disable_web_page_preview=True,
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {e}")
            # Fallback –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await update.message.reply_text(WELCOME)
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ start_command: {e}")
        try:
            await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏ üëã")
        except:
            pass


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    try:
        await update.message.reply_text(
            WELCOME,
            reply_markup=get_home_keyboard(),
            disable_web_page_preview=True,
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–º–æ—â–∏: {e}")
        try:
            await update.message.reply_text(WELCOME)
        except:
            pass


async def call_operator_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /call_operator."""
    user = update.effective_user
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
        db = get_db()
        try:
            db_user = db.query(User).filter(User.tg_user_id == user.id).first()
            if db_user:
                order = db.query(Order).filter(Order.user_id == db_user.id).order_by(Order.created_at.desc()).first()
            else:
                order = None
            if order:
                order.needs_operator = True
                db.commit()
                await notify_operator_called(context.bot, order, order.user)
        finally:
            db.close()

        await update.message.reply_text(CONTACTS_MESSAGE, reply_markup=get_home_keyboard())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_home_keyboard()
        )


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫."""
    import traceback
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫—Ç—Ä–µ–π—Å
    err = "".join(traceback.format_exception(None, context.error, context.error.__traceback__))
    logger.error("Unhandled error: %s", err)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
    try:
        if update and update.effective_chat:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–∏–∞–ª–æ–≥–∞
            # –í PTB v21 –Ω–µ—Ç get_state, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º—è–≥–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –¢–æ–ª—å–∫–æ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º—è–≥–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
            )
    except Exception as e:
        logger.error("Failed to send error to user: %s", e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
async def my_orders_open(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user = update.effective_user
    
    try:
        items, has_more = get_user_orders(user.id, limit=10, offset=0)
        if not items:
            await (update.message or update.effective_message).reply_text(
                NO_ORDERS, reply_markup=get_home_keyboard()
            )
            return
        
        await (update.message or update.effective_message).reply_text(
            YOUR_ORDERS_TITLE, reply_markup=get_home_keyboard()
        )
        await (update.message or update.effective_message).reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑:", reply_markup=orders_list_inline(items, has_more)
        )
        # –∑–∞–ø–æ–º–Ω–∏–º —Å–º–µ—â–µ–Ω–∏–µ –¥–ª—è "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë‚Ä¶"
        context.user_data["orders_offset"] = 0
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await (update.message or update.effective_message).reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_home_keyboard()
        )


async def my_orders_cb(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤."""
    q = update.callback_query
    await q.answer()
    data = q.data
    
    try:
        if data == "ord:more":
            offset = context.user_data.get("orders_offset", 0) + 10
            context.user_data["orders_offset"] = offset
            items, has_more = get_user_orders(update.effective_user.id, limit=10, offset=offset)
            if not items:
                await q.edit_message_reply_markup(reply_markup=None)
                return
            await q.edit_message_reply_markup(reply_markup=orders_list_inline(items, has_more))
            return

        if data.startswith("ord:"):
            oid = int(data.split(":")[1])
            o = get_order_by_id(oid)
            if not o or o.user_id != update.effective_user.id:
                await q.edit_message_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            # –ø–æ–∫–∞–∂–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
            status = STATUS_TITLES.get(o.status.value, o.status.value)
            deadline_str = "–ù–µ —É–∫–∞–∑–∞–Ω"
            if o.deadline_at:
                deadline_str = o.deadline_at.strftime("%d.%m.%Y %H:%M")
            
            card = (
                f"üìÑ –ó–∞–∫–∞–∑ ‚Ññ{o.code}\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                f"–ß—Ç–æ –ø–µ—á–∞—Ç–∞—Ç—å: {o.what_to_print}\n"
                f"–¢–∏—Ä–∞–∂: {o.quantity}\n"
                f"–§–æ—Ä–º–∞—Ç: {o.format or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
                f"–°—Ç–æ—Ä–æ–Ω—ã: {o.sides or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
                f"–î–µ–¥–ª–∞–π–Ω: {deadline_str}\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {o.notes or '‚Äî'}\n"
            )
            await q.message.reply_text(card, reply_markup=get_home_keyboard())
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback –∑–∞–∫–∞–∑–æ–≤: {e}")
        await q.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.")