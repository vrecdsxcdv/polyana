from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes
from config import config

PAGE_SIZE = 10

def _is_operator_chat(update: Update) -> bool:
    chat = update.effective_chat
    return chat and chat.id == config.OPERATOR_CHAT_ID

def _is_admin(update: Update) -> bool:
    uid = update.effective_user.id if update.effective_user else 0
    return uid in config.ADMIN_IDS

def _format_row(o):
    # –æ–∂–∏–¥–∞–µ–º –ø–æ–ª—è: code, category, quantity, status, user_name/phone
    cat = getattr(o, "what_to_print", "‚Äî")
    qty = getattr(o, "quantity", 1)
    st  = getattr(o, "status", "new")
    code= getattr(o, "code", "‚Äî")
    return f"‚Ññ{code} ‚Ä¢ {cat} ‚Ä¢ x{qty} ‚Ä¢ {st}"

def _kb_row(order_id):
    return [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å", callback_data=f"adm_open:{order_id}")]

async def _fetch_orders(offset: int, limit: int):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–µ—Ä–≤–∏—Å
    from services.orders import list_active_orders
    res = list_active_orders(offset=offset, limit=limit)
    orders = res[0] if isinstance(res, tuple) else res
    # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º ¬´–≥–æ—Ç–æ–≤—ã–µ¬ª —Å—Ç–∞—Ç—É—Å—ã
    exclude_statuses = ["DONE", "COMPLETED", "–ì–æ—Ç–æ–≤–æ", "ready", "done", "completed"]
    orders = [o for o in orders if str(getattr(o, "status", "")).upper() not in exclude_statuses]
    return orders

async def _fetch_order(order_id: int):
    from services.orders import get_order_by_code
    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫ –ø–æ ID
    return None

async def all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_operator_chat(update): 
        await update.effective_message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–æ–º —á–∞—Ç–µ.")
        return
    if not _is_admin(update):
        await update.effective_message.reply_text("–¢–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    context.user_data["adm_offset"] = 0
    await _render_page(update, context, 0)

async def _render_page(update: Update, context: ContextTypes.DEFAULT_TYPE, offset: int):
    data = await _fetch_orders(offset, PAGE_SIZE)
    if not data:
        await update.effective_message.reply_text("–ó–∞–∫–∞–∑–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –Ω–µ—Ç.")
        return
    lines = [ _format_row(o) for o in data ]
    rows  = [ _kb_row(getattr(o, "id", 0)) for o in data ]
    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    nav=[]
    if offset>0: nav.append(InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data=f"adm_page:{offset-PAGE_SIZE}"))
    if len(data)==PAGE_SIZE: nav.append(InlineKeyboardButton("–í–ø–µ—Ä—ë–¥ ¬ª", callback_data=f"adm_page:{offset+PAGE_SIZE}"))
    if nav: rows.append(nav)
    await update.effective_message.reply_text(
        "üìã –ó–∞–∫–∞–∑—ã (–≤ —Ä–∞–±–æ—Ç–µ):\n" + "\n".join(lines),
        reply_markup=InlineKeyboardMarkup(rows)
    )

async def on_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _is_operator_chat(update) or not _is_admin(update):
        await update.callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await update.callback_query.answer()
    data = update.callback_query.data
    if data.startswith("adm_page:"):
        offset = int(data.split(":")[1])
        await _render_page(update, context, offset)
        return
    if data.startswith("adm_open:"):
        oid = int(data.split(":")[1])
        order = await _fetch_order(oid)
        if not order:
            await update.effective_message.reply_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
        txt = (
            f"‚Ññ{order['code']}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.get('category_title','‚Äî')}\n"
            f"–ö–æ–ª-–≤–æ: {order.get('quantity',1)}\n"
            f"–°—Ç–∞—Ç—É—Å: {order.get('status','‚Äî')}\n"
            f"–ö–ª–∏–µ–Ω—Ç: {order.get('client','‚Äî')}\n"
        )
        await update.effective_message.reply_text(txt)
        return