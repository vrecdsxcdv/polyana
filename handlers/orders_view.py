from __future__ import annotations
import re
from typing import Optional

from telegram import Update
from telegram.ext import ContextTypes

from db.session import SessionLocal
from db.models import Order   # —É –Ω–∞—Å –∏–º–µ–Ω–Ω–æ db.models.Order

DETAILS_TMPL = (
    "üì¶ *–ó–∞–∫–∞–∑ ‚Ññ{id}*\n"
    "–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
    "–¢–∏—Ä–∞–∂: {qty}\n"
    "–§–æ—Ä–º–∞—Ç: {format}\n"
    "–ü–µ—á–∞—Ç—å: {print_type}\n"
    "–õ–∞–º–∏–Ω–∞—Ü–∏—è: {lamination}\n"
    "–°–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤: {corners}\n"
    "–¶–≤–µ—Ç–Ω–æ—Å—Ç—å: {color}\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
    "–°—Ç–∞—Ç—É—Å: *{status}*\n"
    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
    "üïí {created_at}\n"
)

def _extract_order_id(s: str) -> Optional[int]:
    """–î–æ—Å—Ç–∞—ë–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –∏–∑ callback_data (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤)."""
    if not s:
        return None
    m = re.search(r'(\d+)', s)
    return int(m.group(1)) if m else None

def _order_text(o: Order) -> str:
    def fmt(v, dash='‚Äî'):
        return v if (v is not None and f"{v}".strip() != "") else dash
    return DETAILS_TMPL.format(
        id=o.id,
        category=fmt(getattr(o, "category", None)),
        qty=fmt(getattr(o, "qty", None)),
        format=fmt(getattr(o, "paper_format", None)),
        print_type=fmt(getattr(o, "print_type", None)),
        lamination=fmt(getattr(o, "lamination", None)),
        corners=fmt(getattr(o, "corner_rounding", None)),
        color=fmt(getattr(o, "color", None)),
        phone=fmt(getattr(o, "phone", None)),
        status=fmt(getattr(o, "status", "–ù–æ–≤—ã–π")),
        comment=fmt(getattr(o, "comment", None)),
        created_at=getattr(o, "created_at", None).strftime("%d.%m.%Y %H:%M") if getattr(o, "created_at", None) else "‚Äî",
    )

async def cb_view_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑ –∏–∑ —Å–ø–∏—Å–∫–∞. –ë–µ–∑ –≤–µ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏, —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –æ—à–∏–±–æ–∫."""
    query = update.callback_query
    # 1) –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å ¬´–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶¬ª
    try:
        await query.answer()
    except Exception:
        # –¥–∞–∂–µ –µ—Å–ª–∏ TG —Ä—É–≥–Ω—ë—Ç—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚Äî –≥–ª–∞–≤–Ω–æ–µ –Ω–µ –ø–∞–¥–∞—Ç—å
        pass

    data = query.data or ""
    order_id = _extract_order_id(data)

    if not order_id:
        try:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        except Exception:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")
        return

    session = SessionLocal()
    try:
        order = session.query(Order).filter(Order.id == order_id).first()
        if not order:
            try:
                await query.edit_message_text("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω.")
            except Exception:
                await context.bot.send_message(chat_id=query.message.chat_id, text="‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –±—ã–ª —É–¥–∞–ª—ë–Ω.")
            return

        text = _order_text(order)

        # —Å—Ç–∞—Ä–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ; –µ—Å–ª–∏ –Ω–µ–ª—å–∑—è ‚Äî —à–ª—ë–º –Ω–æ–≤–æ–µ
        try:
            await query.edit_message_text(text=text, parse_mode="Markdown")
        except Exception:
            await context.bot.send_message(chat_id=query.message.chat_id, text=text, parse_mode="Markdown")

    except Exception as e:
        # –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –ª–æ–≥ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"[orders_view] error for order_id={order_id}: {e}")
        try:
            await query.edit_message_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception:
            await context.bot.send_message(chat_id=query.message.chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        session.close()




