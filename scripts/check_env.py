import os
import asyncio
from dotenv import load_dotenv
from telegram.ext import Application

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

async def main():
    if not BOT_TOKEN:
        print("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω –≤ .env")
        return
    
    app = Application.builder().token(BOT_TOKEN).build()

    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã
    updates = await app.bot.get_updates()
    if not updates:
        print("‚ÑπÔ∏è –ù–µ—Ç –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω—É–∂–Ω–æ–π –≥—Ä—É–ø–ø–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
    else:
        printed = set()
        for u in updates:
            msg = getattr(u, "message", None) or getattr(u, "channel_post", None)
            if not msg:
                continue
            chat = msg.chat
            if chat and chat.id not in printed:
                title = chat.title or chat.full_name or str(chat.id)
                print(f"üìå –ß–∞—Ç: {title}\nchat_id = {chat.id}\n")
                printed.add(chat.id)

    await app.shutdown()

if __name__ == "__main__":
    asyncio.run(main())