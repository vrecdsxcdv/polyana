#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫.
"""

import logging
from sqlalchemy import text
from db.session import engine, SessionLocal

def get_db(): return SessionLocal()

logger = logging.getLogger(__name__)

def migrate_database():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    db = None
    try:
        db = get_db()
        
        # –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        migrations = [
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É size_bytes –≤ attachments –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            {
                "name": "add_size_bytes_to_attachments",
                "sql": "ALTER TABLE attachments ADD COLUMN size_bytes INTEGER",
                "check": "SELECT COUNT(*) FROM pragma_table_info('attachments') WHERE name='size_bytes'"
            },
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É size –≤ attachments –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            {
                "name": "add_size_to_attachments", 
                "sql": "ALTER TABLE attachments ADD COLUMN size INTEGER",
                "check": "SELECT COUNT(*) FROM pragma_table_info('attachments') WHERE name='size'"
            },
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É status –≤ orders –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            {
                "name": "add_status_to_orders",
                "sql": "ALTER TABLE orders ADD COLUMN status TEXT DEFAULT 'NEW'",
                "check": "SELECT COUNT(*) FROM pragma_table_info('orders') WHERE name='status'"
            },
            # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –ø–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
            {
                "name": "add_lamination_to_orders",
                "sql": "ALTER TABLE orders ADD COLUMN lamination TEXT DEFAULT 'none'",
                "check": "SELECT COUNT(*) FROM pragma_table_info('orders') WHERE name='lamination'"
            },
            {
                "name": "add_bigovka_count_to_orders",
                "sql": "ALTER TABLE orders ADD COLUMN bigovka_count INTEGER DEFAULT 0",
                "check": "SELECT COUNT(*) FROM pragma_table_info('orders') WHERE name='bigovka_count'"
            },
            {
                "name": "add_corner_rounding_to_orders",
                "sql": "ALTER TABLE orders ADD COLUMN corner_rounding BOOLEAN DEFAULT 0",
                "check": "SELECT COUNT(*) FROM pragma_table_info('orders') WHERE name='corner_rounding'"
            },
            {
                "name": "add_sheet_format_to_orders",
                "sql": "ALTER TABLE orders ADD COLUMN sheet_format TEXT DEFAULT ''",
                "check": "SELECT COUNT(*) FROM pragma_table_info('orders') WHERE name='sheet_format'"
            },
            {
                "name": "add_custom_size_mm_to_orders",
                "sql": "ALTER TABLE orders ADD COLUMN custom_size_mm TEXT DEFAULT ''",
                "check": "SELECT COUNT(*) FROM pragma_table_info('orders') WHERE name='custom_size_mm'"
            },
            {
                "name": "add_sheets_qty_to_orders",
                "sql": "ALTER TABLE orders ADD COLUMN sheets_qty INTEGER",
                "check": "SELECT COUNT(*) FROM pragma_table_info('orders') WHERE name='sheets_qty'"
            },
            {
                "name": "add_calc_sum_to_orders",
                "sql": "ALTER TABLE orders ADD COLUMN calc_sum REAL",
                "check": "SELECT COUNT(*) FROM pragma_table_info('orders') WHERE name='calc_sum'"
            }
            ,{
                "name": "add_material_to_orders",
                "sql": "ALTER TABLE orders ADD COLUMN material TEXT DEFAULT ''",
                "check": "SELECT COUNT(*) FROM pragma_table_info('orders') WHERE name='material'"
            }
        ]
        
        for migration in migrations:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–ª–æ–Ω–∫–∞
                result = db.execute(text(migration["check"])).fetchone()
                if result[0] == 0:
                    logger.info(f"–í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: {migration['name']}")
                    db.execute(text(migration["sql"]))
                    db.commit()
                    logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è {migration['name']} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.info(f"‚è≠Ô∏è –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º: {migration['name']}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ {migration['name']}: {e}")
                db.rollback()
        
        logger.info("üéâ –í—Å–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
        
    except Exception as e:
        logger.exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        if db:
            db.rollback()
    finally:
        if db:
            db.close()

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    migrate_database()
