"""
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏.
"""

import logging
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, filters, Defaults, ApplicationBuilder
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

from config import config
from database import create_tables
from states import OrderStates
from handlers.common import start_command, help_command, call_operator_command, error_handler, my_orders_open, my_orders_cb
from handlers.menu_handlers import handle_my_orders, handle_new_order, handle_contact_operator, handle_help
from handlers.order_flow import (
    start_order, handle_product, handle_bc_qty, handle_bc_size, handle_bc_sides,
    handle_fly_format, handle_fly_sides, handle_upload, handle_due,
    handle_phone, handle_notes, handle_confirm, handle_back,
    handle_sheet_format, handle_custom_size, handle_postpress, handle_postpress_bigovka,
    handle_cancel_choice, handle_cancel, handle_print_format, handle_print_type,
    handle_print_format_new, handle_print_type_new, handle_postpress_new,
    handle_smart_cancel, handle_cancel_choice_new,
    BACK_RE, NEXT_RE, SKIP_RE, SUBMIT_RE
)
from handlers.operator import get_operator_handlers
from handlers.status import status_command, status_callback
from handlers.admin import get_admin_handlers


def setup_logging() -> None:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π."""
    import logging.handlers
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–æ—Ç–∞—Ü–∏—é –ª–æ–≥–æ–≤
    file_handler = logging.handlers.RotatingFileHandler(
        "bot.log", 
        maxBytes=1_000_000,  # 1 –ú–ë
        backupCount=3
    )
    
    # –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ª–æ–≥–æ–≤
    formatter = logging.Formatter(
        "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    file_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
    root_logger = logging.getLogger()
    root_logger.setLevel(logging.INFO)
    root_logger.addHandler(file_handler)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
    console_handler = logging.StreamHandler()
    console_handler.setFormatter(formatter)
    root_logger.addHandler(console_handler)


def create_application() -> Application:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Defaults –∏ —Ç–∞–π–º–∞—É—Ç–∞–º–∏
    defaults = Defaults(tzinfo=config.TIMEZONE, parse_mode="HTML")
    application = (
        ApplicationBuilder()
        .token(config.BOT_TOKEN)
        .defaults(defaults)
        .get_updates_connection_pool_size(4)
        .read_timeout(10)
        .connect_timeout(10)
        .pool_timeout(5)
        .build()
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    create_tables()
    
    # Conversation handler –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –∑–∞–∫–∞–∑–∞
    order_conversation = ConversationHandler(
        entry_points=[
            CommandHandler("neworder", start_order),
            MessageHandler(filters.Regex("^üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑$"), start_order)
        ],
        states={
            OrderStates.PRODUCT: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_product)
            ],
            OrderStates.BC_QTY: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bc_qty)
            ],
            OrderStates.BC_SIZE: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bc_size)
            ],
            OrderStates.BC_SIDES: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_bc_sides)
            ],
            OrderStates.FLY_FORMAT: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_fly_format)
            ],
            OrderStates.FLY_SIDES: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_fly_sides)
            ],
            # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            OrderStates.ORDER_SHEET_FORMAT: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_sheet_format)
            ],
            OrderStates.ORDER_CUSTOM_SIZE: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_custom_size)
            ],
            OrderStates.ORDER_POSTPRESS: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_postpress)
            ],
            OrderStates.ORDER_POSTPRESS_BIGOVKA: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_postpress_bigovka)
            ],
            OrderStates.CANCEL_CHOICE: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_cancel_choice)
            ],
            OrderStates.PRINT_FORMAT: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_print_format)
            ],
            OrderStates.PRINT_TYPE: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_print_type_new)
            ],
            OrderStates.POSTPRESS: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_postpress_new)
            ],
            OrderStates.ORDER_UPLOAD: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.Document.ALL, handle_upload),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_upload)
            ],
            OrderStates.ORDER_DUE: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_due)
            ],
            OrderStates.ORDER_PHONE: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_phone)
            ],
            OrderStates.ORDER_NOTES: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_notes)
            ],
            OrderStates.ORDER_CONFIRM: [
                MessageHandler(filters.Regex(BACK_RE), handle_back),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_confirm)
            ]
        },
        fallbacks=[
            MessageHandler(filters.Regex(BACK_RE), handle_back),
            MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), handle_cancel)
        ],
        name="order_conversation",
        persistent=False,
        allow_reentry=True
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(order_conversation)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(CommandHandler("help", start_command))
    application.add_handler(CommandHandler("call_operator", call_operator_command))
    application.add_handler(CommandHandler("neworder", start_order))
    application.add_handler(CommandHandler("status", my_orders_open))
    
    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    application.add_handler(MessageHandler(filters.Regex("^üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑$"), handle_new_order))
    application.add_handler(MessageHandler(filters.Regex("^üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã$"), handle_my_orders))
    application.add_handler(MessageHandler(filters.Regex("^‚òéÔ∏è –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º$"), handle_contact_operator))
    application.add_handler(MessageHandler(filters.Regex("^‚ùì –ü–æ–º–æ—â—å$"), handle_help))
    
    # –ö–æ–ª–ª–±—ç–∫–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    application.add_handler(CallbackQueryHandler(my_orders_cb, pattern="^ord:"))
    application.add_handler(CommandHandler("status", status_command))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    for h in get_operator_handlers():
        application.add_handler(h)

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
    application.add_handler(CallbackQueryHandler(status_callback, pattern=r"^status:\d+$"))
    
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    for handler in get_admin_handlers():
        application.add_handler(handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)
    
    return application


def main() -> None:
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    if not config.BOT_TOKEN:
        error_msg = "‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!"
        logger.error(error_msg)
        print(error_msg)
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª .env —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç BOT_TOKEN")
        return
    
    if len(config.BOT_TOKEN.split(':')) != 2:
        error_msg = "‚ùå –û–®–ò–ë–ö–ê: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç BOT_TOKEN!"
        logger.error(error_msg)
        print(error_msg)
        print("üí° –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 123456:ABC-DEF1234ghIkl-zyx57W2v1u1234")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = create_application()
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—Å–∫–µ
        logger.info("‚úÖ Bot started (polling). Username: @SendPrintBot")
        print("‚úÖ Bot started (polling). Username: @SendPrintBot")
        print(f"üìÅ DB: ./bot.db")
        print(f"üìÅ Uploads: ./uploads/")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True,
            close_loop=False
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        raise


if __name__ == "__main__":
    main()