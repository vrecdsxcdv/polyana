# keyboards.py
from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

BTN_BACK   = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
BTN_NEXT   = "‚û°Ô∏è –î–∞–ª–µ–µ"
BTN_SKIP   = "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
BTN_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"
BTN_CANCEL_ORDER = "üõë –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è fallbacks
NAV_BACK = "‚Ü©Ô∏è –ù–∞–∑–∞–¥"
NAV_CANCEL = "‚ùå –û—Ç–º–µ–Ω–∞"

BTN_NEW_ORDER = "üßæ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑"
BTN_MY_ORDERS = "üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã"
BTN_CALL_OPERATOR = "üßë‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"
BTN_HELP = "üÜò –ü–æ–º–æ—â—å"

# –¢–µ–∫—Å—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π
CAT_BC       = "ü™™ –í–∏–∑–∏—Ç–∫–∏"
CAT_POSTERS  = "üñº –ü–ª–∞–∫–∞—Ç—ã"
CAT_FLYERS   = "üìÑ –§–ª–∞–µ—Ä—ã"
CAT_STICKERS = "üè∑Ô∏è –ù–∞–∫–ª–µ–π–∫–∏"
CAT_BANNERS  = "üñ® –ë–∞–Ω–Ω–µ—Ä—ã"
CAT_OFFICE   = "üóÇ –ü–µ—á–∞—Ç—å –Ω–∞ –æ—Ñ–∏—Å–Ω–æ–π"
BTN_CUSTOM   = "üõ†Ô∏è –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑"

def bottom_row():
    return [BTN_BACK, BTN_CANCEL]

def get_main_menu_keyboard():
    # –≠—Ç–∞–∂ 1 ‚Äî –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ (–≤–æ –≤—Å—é —à–∏—Ä–∏–Ω—É)
    # –≠—Ç–∞–∂ 2 ‚Äî –ø–æ–ø–æ–ª–∞–º –ú–æ–∏ –∑–∞–∫–∞–∑—ã / –°–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    # –≠—Ç–∞–∂ 3 ‚Äî –ü–æ–º–æ—â—å (–≤–æ –≤—Å—é —à–∏—Ä–∏–Ω—É)
    return ReplyKeyboardMarkup(
        [
            [BTN_NEW_ORDER],
            [BTN_MY_ORDERS, BTN_CALL_OPERATOR],
            [BTN_HELP],
        ],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_categories_keyboard():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ('–ß—Ç–æ –±—É–¥–µ–º –ø–µ—á–∞—Ç–∞—Ç—å?')
    –ë–µ–∑ –∫–Ω–æ–ø–∫–∏ '–û—Ç–º–µ–Ω–∞', —Å –∫–Ω–æ–ø–∫–æ–π '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', –∫–æ—Ç–æ—Ä–∞—è –≤–µ–¥–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    rows = [
        [CAT_BC, CAT_POSTERS],
        [CAT_FLYERS, CAT_STICKERS],
        [CAT_BANNERS, CAT_OFFICE],
        [BTN_CUSTOM],
        [BTN_BACK],
    ]
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, is_persistent=True)

# –ê–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
get_category_keyboard = get_categories_keyboard

def get_cancel_choice_keyboard():
    return ReplyKeyboardMarkup(
        [["‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥", "üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑"],
         [BTN_BACK]],
        resize_keyboard=True, is_persistent=True
    )

# –•–µ–ª–ø–µ—Ä: –Ω–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è —à–∞–≥–æ–≤ (–ù–∞–∑–∞–¥/–û—Ç–º–µ–Ω–∞ + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –î–∞–ª–µ–µ/–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å)
def nav_keyboard(show_next=False, show_skip=False):
    row = [BTN_BACK, BTN_CANCEL]
    rows = [row]
    if show_next or show_skip:
        extra = []
        if show_next: extra.append(BTN_NEXT)
        if show_skip: extra.append(BTN_SKIP)
        rows.append(extra)
    return ReplyKeyboardMarkup(rows, resize_keyboard=True, is_persistent=True)

# –ê–ª–∏–∞—Å –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞ (–±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ—Å–ª–µ get_bc_sides_keyboard)

# –û—Ñ–∏—Å–Ω–∞—è –±—É–º–∞–≥–∞
def get_office_format_keyboard():
    return ReplyKeyboardMarkup(
        [["A4", "A3"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_office_color_keyboard():
    return ReplyKeyboardMarkup(
        [["‚ö´ –ß/–ë", "üåà –¶–≤–µ—Ç–Ω–∞—è"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

# –ü–ª–∞–∫–∞—Ç—ã
def get_poster_format_keyboard():
    return ReplyKeyboardMarkup(
        [["A2", "A1", "A0"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_simple_lamination_keyboard():
    return ReplyKeyboardMarkup(
        [["–õ–∞–º–∏–Ω–∞—Ü–∏—è: –î–∞", "–õ–∞–º–∏–Ω–∞—Ü–∏—è: –ù–µ—Ç"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

# –í–∏–∑–∏—Ç–∫–∏
def get_bc_format_keyboard():
    return ReplyKeyboardMarkup(
        [["90√ó50 –º–º"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_bc_sides_keyboard():
    return ReplyKeyboardMarkup(
        [["–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ", "–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_bc_lamination_keyboard():
    return ReplyKeyboardMarkup(
        [["‚ú® –ú–∞—Ç–æ–≤–∞—è", "‚ú® –ì–ª—è–Ω–µ—Ü", "‚ùå –ù–µ—Ç"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

# –§–ª–∞–µ—Ä—ã
def get_fly_format_keyboard():
    return ReplyKeyboardMarkup(
        [["A7", "A6"], ["A5", "A4"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_fly_sides_keyboard():
    return ReplyKeyboardMarkup(
        [["–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ", "–î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

# –ù–∞–∫–ª–µ–π–∫–∏
def get_sticker_material_keyboard():
    return ReplyKeyboardMarkup(
        [["–ë—É–º–∞–≥–∞", "–ü–ª–µ–Ω–∫–∞"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_sticker_color_keyboard():
    return ReplyKeyboardMarkup(
        [["‚ö´ –ß/–ë", "üåà –¶–≤–µ—Ç–Ω–∞—è"], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

# –û–±—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_files_keyboard():
    return ReplyKeyboardMarkup(
        [[BTN_NEXT], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_due_keyboard():
    return ReplyKeyboardMarkup(
        [[BTN_SKIP], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_phone_keyboard():
    return ReplyKeyboardMarkup(
        [bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_notes_keyboard():
    return ReplyKeyboardMarkup(
        [[BTN_SKIP], bottom_row()],
        resize_keyboard=True,
        is_persistent=True,
    )

def get_confirm_keyboard():
    return ReplyKeyboardMarkup(
        [["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å"], [BTN_CANCEL]],
        resize_keyboard=True,
        is_persistent=True,
    )

# –ê–ª–∏–∞—Å –Ω–∞ —Å–ª—É—á–∞–π —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞
get_fly_sides_keyboard = get_bc_sides_keyboard

def smart_cancel_inline():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚Ü©Ô∏è –û—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥", callback_data="cancel_step")],
        [InlineKeyboardButton("‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",   callback_data="cancel_all")],
    ])

# Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤ (2-3 –≤ —Ä—è–¥)
def make_orders_inline_kb(orders):
    """
    –ì–µ–Ω–µ—Ä–∏—Ç InlineKeyboardMarkup —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤.
    –ö–Ω–æ–ø–∫–∞ = –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, callback_data = "order_view:<CODE>"
    """
    buttons = []
    row = []
    for i, o in enumerate(orders, start=1):
        code = getattr(o, "code", None)
        if not code:
            continue
        row.append(InlineKeyboardButton(text=f"#{code}", callback_data=f"order_view:{code}"))
        if len(row) == 3:
            buttons.append(row)
            row = []
    if row:
        buttons.append(row)
    return InlineKeyboardMarkup(buttons) if buttons else None
